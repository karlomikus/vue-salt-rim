/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate user
         * @description Authenticate user and get auth token
         */
        post: operations["authenticate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout currently authenticated user
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register
         * @description Register a new user
         */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request password reset
         * @description Request a new password reset link
         */
        post: operations["passwordForgot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset password
         * @description Reset user password
         */
        post: operations["passwordReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify/{id}/{hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Confirm account
         * @description Confirm user account, if applicable
         */
        get: operations["confirmAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List bars
         * @description Show a list of bars user has access to. Includes bars that user has made and bars he is a member of.
         */
        get: operations["listBars"];
        put?: never;
        /**
         * Create bar
         * @description Create a new bar
         */
        post: operations["saveBar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show bar
         * @description Show information about a specific bar
         */
        get: operations["showBar"];
        /**
         * Update bar
         * @description Update a specific bar
         */
        put: operations["updateBar"];
        post?: never;
        /**
         * Delete bar
         * @description Delete a specific bar
         */
        delete: operations["deleteBar"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join a bar
         * @description Join a bar via invite code
         */
        post: operations["joinBar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/memberships": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List members
         * @description List all bar members
         */
        get: operations["listBarMembership"];
        put?: never;
        post?: never;
        /**
         * Leave a bar
         * @description Deletes a user's membership to a bar
         */
        delete: operations["leaveBar"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/memberships/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove member
         * @description Removes a specific user's membership from a bar
         */
        delete: operations["removeBarMembership"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer ownership
         * @description Transfer a bar to another user.
         */
        post: operations["transferBarOwnership"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update status
         * @description Update current status of a bar
         */
        post: operations["toggleBarStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/optimize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Optimize bar
         * @description Triggers bar optimizations. Updates all cocktail ABVs, rebuilds ingredient hierarchy, updates search index. Limited call to once per minute.
         */
        post: operations["optimizeBar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/sync-datapack": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync recipes
         * @description Triggers synchronization of recipes from the default datapack. Matches data by name, does not overwrite your existing recipes or ingredients.
         */
        post: operations["syncBarDatapack"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calculators": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List calculators
         * @description Show a list of all calculators in a bar
         */
        get: operations["listCalculators"];
        put?: never;
        /**
         * Create calculator
         * @description Create a new calculator
         */
        post: operations["saveCalculator"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calculators/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show calculator
         * @description Show a specific calculator
         */
        get: operations["showCalculator"];
        /**
         * Update calculator
         * @description Update a specific calculator
         */
        put: operations["updateCalculator"];
        post?: never;
        /**
         * Delete calculator
         * @description Delete a specific calculator
         */
        delete: operations["deleteCalculator"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/calculators/{id}/solve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Solve calculator
         * @description Solve calculator expressions. Takes a JSON body with the calculator input variables names as keys and their values as values and solves the defined evaluations. Results are objects with evaluation variable names as keys and solved expression result as values.
         */
        post: operations["solveCalculator"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List cocktails
         * @description Show a list of all cocktails in a bar
         */
        get: operations["listCocktails"];
        put?: never;
        /**
         * Create cocktail
         * @description Create a new cocktail
         */
        post: operations["saveCocktail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show cocktail
         * @description Show details of a specific cocktail
         */
        get: operations["showCocktail"];
        /**
         * Update cocktail
         * @description Update a specific cocktail
         */
        put: operations["updateCocktail"];
        post?: never;
        /**
         * Delete cocktail
         * @description Delete a specific cocktail
         */
        delete: operations["deleteCocktail"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/toggle-favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggle favorite
         * @description Marks cocktail as users favorite. Can be called again to remove the favorite.
         */
        post: operations["toggleCocktailFavorite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/public-link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a public ID
         * @description Create a public link that can be shared
         */
        post: operations["createCocktailPublicLink"];
        /**
         * Delete public link
         * @description Delete a cocktail public link
         */
        delete: operations["deleteCocktailPublicLink"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Share cocktail
         * @description Get cocktail details in a specific shareable format
         */
        get: operations["shareCocktail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show similar cocktails
         * @description Shows similar cocktails to the given cocktail. Prefers cocktails with same base ingredient.
         */
        get: operations["showSimilarCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Copy cocktail
         * @description Create a copy of a cocktail
         */
        post: operations["copyCocktail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show cocktail prices
         * @description Show calculated prices categorized by bar price categories. Prices are calculated using ingredient prices. If price category is missing, the ingredients don't have a price in that category. If there are multiple prices in category, the minimum price is used. Keep in mind that the price is just an estimate and might not be accurate.
         */
        get: operations["getCocktailPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktail-methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List methods
         * @description Show a list of all cocktail methods in a bar
         */
        get: operations["listCocktailMethods"];
        put?: never;
        /**
         * Create method
         * @description Create a new cocktail method
         */
        post: operations["saveCocktailMethod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktail-methods/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show method
         * @description Show a specific cocktail method
         */
        get: operations["showCocktailMethod"];
        /**
         * Update method
         * @description Update a specific cocktail method
         */
        put: operations["updateCocktailMethod"];
        post?: never;
        /**
         * Delete method
         * @description Delete a specific cocktail method
         */
        delete: operations["deleteCocktailMethod"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List collections
         * @description Show a list of all user collections in a specific bar
         */
        get: operations["listCollections"];
        put?: never;
        /**
         * Create collection
         * @description Create a new collection
         */
        post: operations["saveCollection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List shared collections
         * @description Show a list of all collections that users shared with the bar
         */
        get: operations["listSharedCollections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show collection
         * @description Show a specific collection
         */
        get: operations["showCollection"];
        /**
         * Update collection
         * @description Update a specific collection
         */
        put: operations["updateCollection"];
        post?: never;
        /**
         * Delete collection
         * @description Delete a specific collection
         */
        delete: operations["deleteCollection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{id}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Sync cocktails in a collection
         * @description Used to updated/add/delete cocktails in a collection. To delete all cocktails pass an empty array.
         */
        put: operations["syncCocktailsInCollection"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/explore/cocktails/{public_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show cocktail
         * @description Show details from a cocktail using a public id
         */
        get: operations["showPublicCocktail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List exports
         * @description Show a list of all generated exports in a bar
         */
        get: operations["listExports"];
        put?: never;
        /**
         * Create export
         * @description Start a new export process
         */
        post: operations["saveExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete export
         * @description Delete a specific export
         */
        delete: operations["deleteExport"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports/{id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download export
         * @description Download a specific export
         */
        get: operations["downloadExport"];
        put?: never;
        /**
         * Generate link
         * @description Generates a publicly accessible download link for the export. The link will be valid for 1 minute by default.
         */
        post: operations["generateExportDownloadLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/feeds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List feeds
         * @description Show a list of news and recipes from RSS/Atom feeds
         */
        get: operations["listFeeds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/glasses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List glassware
         * @description Show a list of all glassware in the bar
         */
        get: operations["listGlassware"];
        put?: never;
        /**
         * Create glassware
         * @description Create a new glassware
         */
        post: operations["saveGlassware"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/glasses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show glassware
         * @description Show a specific glassware
         */
        get: operations["showGlassware"];
        /**
         * Update glassware
         * @description Update a specific glassware
         */
        put: operations["updateGlassware"];
        post?: never;
        /**
         * Delete glassware
         * @description Delete a specific glassware
         */
        delete: operations["deleteGlassware"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List images
         * @description List all images uploaded by the authenticated user
         */
        get: operations["listImages"];
        put?: never;
        /**
         * Upload image
         * @description Used to upload multiple images at once. Uploaded images via this endpoint will not be attached to any resource. Images are converted to WebP format with 85% quality of the original image.
         */
        post: operations["uploadImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show image
         * @description Show a single image
         */
        get: operations["showImage"];
        put?: never;
        /**
         * Update image
         * @description Update a specific image
         */
        post: operations["updateImage"];
        /**
         * Delete image
         * @description Delete a specific image
         */
        delete: operations["deleteImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/{id}/thumb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get thumbnail
         * @description Generate a thumbnail of a specific image
         */
        get: operations["getImageThumbnail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import/cocktail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import recipe
         * @description Import a recipe from a JSON structure that follows Bar Assistant recipe JSON schema. Supported schemas include [Draft 2](https://barassistant.app/cocktail-02.schema.json) and [Draft 1](https://barassistant.app/cocktail-01.schema.json).
         */
        post: operations["importCocktail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import/scrape": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Scrape recipe
         * @description Try to scrape a recipe from a website. Most of the well known recipe websites should work. Data returned is a valid JSON schema that you can import using import cocktail endpoint.
         */
        post: operations["scrapeRecipe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import ingredients
         * @description Import ingredients from a CSV source
         */
        post: operations["importIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ingredients
         * @description Show a list of all ingredients in a bar
         */
        get: operations["listIngredients"];
        put?: never;
        /**
         * Create ingredient
         * @description Create a new ingredient
         */
        post: operations["saveIngredient"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show ingredient
         * @description Show a specific ingredient
         */
        get: operations["showIngredient"];
        /**
         * Update ingredient
         * @description Update a specific ingredient
         */
        put: operations["updateIngredient"];
        post?: never;
        /**
         * Delete ingredient
         * @description Delete a specific ingredient
         */
        delete: operations["deleteIngredient"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}/extra": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Extra cocktails
         * @description Show a list of extra cocktails you can make if you add given ingredient to your shelf
         */
        get: operations["extraIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List cocktails
         * @description List all cocktails that use this ingredient
         */
        get: operations["ingredientCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}/substitutes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ingredient substitutes
         * @description Show a list of ingredients that are used as a substitute for this ingredient in cocktail recipes.
         */
        get: operations["ingredientSubstitutes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}/tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show tree
         * @description Show a ingredient hierarchy as a tree
         */
        get: operations["showIngredientTree"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show menu
         * @description Show a bar menu
         */
        get: operations["showMenu"];
        put?: never;
        /**
         * Update menu
         * @description Update bar menu
         */
        post: operations["updateMenu"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/explore/menus/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show public menu
         * @description Show a public bar menu details
         */
        get: operations["publicMenu"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export menu
         * @description Export menu as CSV
         */
        get: operations["exportMenu"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List notes
         * @description Show list of all user notes
         */
        get: operations["listNotes"];
        put?: never;
        /**
         * Create note
         * @description Create a new note
         */
        post: operations["saveNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show note
         * @description Show a single note
         */
        get: operations["showNote"];
        put?: never;
        post?: never;
        /**
         * Delete note
         * @description Delete a single note
         */
        delete: operations["deleteNote"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tokens
         * @description List all personal access tokens
         */
        get: operations["listTokens"];
        put?: never;
        /**
         * Create token
         * @description Create a new personal access token
         */
        post: operations["saveToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke token
         * @description Revoke a personal access token
         */
        delete: operations["deleteToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/price-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List price categories
         * @description List all price categories in a bar
         */
        get: operations["listPriceCategories"];
        put?: never;
        /**
         * Create price category
         * @description Create a new price category
         */
        post: operations["savePriceCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/price-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show price category
         * @description Show a single price category
         */
        get: operations["10017aa4f043f641c210bafc56092997"];
        /**
         * Update price category
         * @description Update a single price category
         */
        put: operations["updatePriceCategory"];
        post?: never;
        /**
         * Delete price category
         * @description Delete a single price category
         */
        delete: operations["deletePriceCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show profile
         * @description Show current user profile information
         */
        get: operations["showProfile"];
        put?: never;
        /**
         * Update profile
         * @description Update user profile
         */
        post: operations["updateProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile/sso/{provider}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete SSO provider
         * @description Delete user's SSO provider
         */
        delete: operations["deleteSSO"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/{slugOrId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show bar
         * @description Show public information about a single bar. To access this endpoint the bar must be marked as public.
         */
        get: operations["showPublicBar"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/{slugOrId}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List cocktails
         * @description List and filter bar cocktails. To access this endpoint the bar must be marked as public.
         */
        get: operations["listPublicBarCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/public/{slugOrId}/cocktails/{slugOrPublicId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show cocktail
         * @description Show public information about cocktail. If valid public ID is provided it will used, if not it will use cocktail slug.
         */
        get: operations["showPublicBarCocktail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rate cocktail
         * @description Rate a single cocktail
         */
        post: operations["rateCocktail"];
        /**
         * Delete cocktail rating
         * @description Delete current user cocktail rating
         */
        delete: operations["deleteRating"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/recommender/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Recommend cocktails
         * @description Recommends cocktails based on bar member favorites.
         */
        get: operations["recommendCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sso/{provider}/redirect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * SSO redirect
         * @description Redirect to SSO authentication
         */
        get: operations["ssoRedirect"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sso/{provider}/callback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * SSO callback
         * @description Callback for SSO login
         */
        get: operations["ssoCallback"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/sso/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * SSO providers
         * @description Configured SSO providers
         */
        get: operations["ssoProviders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/server/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show information
         * @description Show server status and information
         */
        get: operations["showServerVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user ingredients
         * @description Ingredients that user saved to their shelf
         */
        get: operations["listUserIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List shelf cocktails
         * @description Cocktails that the user can make with ingredients on their shelf
         */
        get: operations["listUserShelfCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/cocktails/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List favorites
         * @description Show a list of cocktails user has favorited
         */
        get: operations["listUserFavoriteCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients/batch-store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save user ingredients
         * @description Save multiple ingredients to user shelf
         */
        post: operations["batchStoreUserIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients/batch-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete user ingredients
         * @description Delete multiple ingredients from user shelf
         */
        post: operations["batchDeleteUserIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients/recommend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Recommend user ingredients
         * @description Shows a list of ingredients that will increase total shelf cocktails when added to user shef
         */
        get: operations["recommendIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List bar shelf ingredients
         * @description Ingredients that bar has in it's shelf
         */
        get: operations["listBarShelfIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/ingredients/batch-store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save bar ingredients
         * @description Save multiple ingredients to bar shelf
         */
        post: operations["batchStoreBarShelfIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/ingredients/batch-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete bar ingredients
         * @description Delete multiple ingredients from bar shelf
         */
        post: operations["batchDeleteBarShelfIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List bar shelf cocktails
         * @description Cocktails that the bar can make with ingredients on their shelf
         */
        get: operations["listBarShelfCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/ingredients/recommend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Recommend bar ingredients
         * @description Shows a list of ingredients that will increase total bar shelf cocktails when added to bar shef
         */
        get: operations["recommendBarIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show shopping list
         * @description List all ingredients on a shopping list
         */
        get: operations["listShoppingListIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list/batch-store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add ingredients
         * @description Add multiple ingredients to a shopping list
         */
        post: operations["batchStoreShoppingListIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list/batch-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete ingredients
         * @description Remove multiple ingredients from shopping list
         */
        post: operations["batchDeleteShoppingListIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Share shopping list
         * @description Get a shopping list in a specific format
         */
        get: operations["shareShoppingList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show bar stats
         * @description Show detailed stats about a single bar
         */
        get: operations["showBarStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show subscription
         * @description Show a subscription status
         */
        get: operations["showSubscription"];
        put?: never;
        /**
         * Update subscription
         * @description Update user billing subscription
         */
        post: operations["updateSubscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tags
         * @description Show a list of tags in a bar
         */
        get: operations["listTags"];
        put?: never;
        /**
         * Create tag
         * @description Create a new tag
         */
        post: operations["saveTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show tag
         * @description Show a single tag
         */
        get: operations["showTag"];
        /**
         * Update tag
         * @description Update a single tag
         */
        put: operations["updateTag"];
        post?: never;
        /**
         * Delete tag
         * @description Delete a single tag
         */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description Show a list of all users in a bar
         */
        get: operations["listUsers"];
        put?: never;
        /**
         * Create user
         * @description Create a new user
         */
        post: operations["saveUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show user
         * @description Show a single user
         */
        get: operations["showUser"];
        /**
         * Update user
         * @description Update a single user
         */
        put: operations["updateUser"];
        post?: never;
        /**
         * Delete user
         * @description Delete a single user
         */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/utensils": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List utensils
         * @description List all utensils in a bar
         */
        get: operations["listUtensils"];
        put?: never;
        /**
         * Create utensil
         * @description Create a new utensil
         */
        post: operations["saveUtensil"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/utensils/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show utensil
         * @description Show a single utensil
         */
        get: operations["showUtensil"];
        /**
         * Update utensil
         * @description Update a single utensil
         */
        put: operations["updateUtensil"];
        post?: never;
        /**
         * Delete utensil
         * @description Delete a single utensil
         */
        delete: operations["deleteUtensil"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        BarOptionsEnum: "ingredients" | "cocktails";
        /** @enum {string} */
        ExportTypeEnum: "datapack" | "schema" | "md" | "json-ld" | "xml" | "yaml";
        /** @enum {string} */
        ForceUnitConvertEnum: "none" | "ml" | "oz" | "cl";
        /** @enum {string} */
        DuplicateActionsEnum: "none" | "skip" | "overwrite";
        /** @description Represents the amount of cocktail ingredient in different formats */
        AmountFormats: {
            ml: {
                /**
                 * Format: float
                 * @example 30
                 */
                amount: number;
                /**
                 * Format: float
                 * @example 60
                 */
                amount_max: number;
                /** @example ml */
                units: string;
                /** @example 30-60 ml */
                full_text: string;
            };
            oz: {
                /**
                 * Format: float
                 * @example 1
                 */
                amount: number;
                /**
                 * Format: float
                 * @example 2
                 */
                amount_max: number;
                /** @example oz */
                units: string;
                /** @example 1-2 oz */
                full_text: string;
            };
            cl: {
                /**
                 * Format: float
                 * @example 3
                 */
                amount: number;
                /**
                 * Format: float
                 * @example 6
                 */
                amount_max: number;
                /** @example cl */
                units: string;
                /** @example 3-6 cl */
                full_text: string;
            };
        };
        /** @description Represents a bar with basic information */
        BarBasic: {
            /**
             * @description The ID of the bar
             * @example 1
             */
            id: number;
            /**
             * @description The slug of the bar
             * @example bar-name-1
             */
            slug: string;
            /**
             * @description The name of the bar
             * @example Bar name
             */
            name: string;
            /**
             * @description The subtitle of the bar
             * @example Bar subtitle
             */
            subtitle: string | null;
        };
        /** @description Represents a bar membership */
        BarMembership: {
            /**
             * @description The ID of the user
             * @example 1
             */
            user_id: number;
            /**
             * @description The name of the user
             * @example Bartender
             */
            user_name: string;
            /**
             * @description The ID of the bar
             * @example 1
             */
            bar_id: number;
            /**
             * @description Indicates if the shelf is public
             * @example true
             */
            is_shelf_public: boolean;
        };
        /** @description Details about a bar */
        Bar: {
            /**
             * @description Unique number that can be used to reference a specific bar.
             * @example 1
             */
            id: number;
            /**
             * @description Unique string that can be used to reference a specific bar.
             * @example bar-name-1
             */
            slug: string;
            /**
             * @description Name of the bar
             * @example Bar name
             */
            name: string;
            /**
             * @description Optional short quip about the bar
             * @example A short subtitle of a bar
             */
            subtitle: string | null;
            /**
             * @description Description of the bar
             * @example Bar description
             */
            description: string | null;
            /**
             * @description Random code used to invite people to the bar
             * @example 01H8S3VH2HTEB3D893AW8NTBBC
             */
            invite_code: string | null;
            /** @description Current status of the bar */
            status: components["schemas"]["BarStatusEnum"];
            /** @description Settings for the bar */
            settings: components["schemas"]["BarSettings"];
            /**
             * @description Host URL used to access the bar's search engine
             * @example my.test.com
             */
            search_host: string | null;
            /**
             * @description Auth token used to access the bar's search engine
             * @example null
             */
            search_token: string | null;
            /**
             * Format: date-time
             * @description Date and time when the bar was created
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Date and time when the bar was last updated
             */
            updated_at: string | null;
            /** @description User who created the bar */
            created_user?: components["schemas"]["UserBasic"];
            /** @description User who last updated the bar */
            updated_user?: components["schemas"]["UserBasic"] | null;
            /** @description User access rights for the bar */
            access: {
                /** @example 1 */
                role_id: number;
                /** @example true */
                can_edit: boolean;
                /** @example true */
                can_delete: boolean;
                /** @example true */
                can_activate: boolean;
                /** @example true */
                can_deactivate: boolean;
            };
            /** @description Images associated with the bar */
            images?: components["schemas"]["Image"][];
            /**
             * @default false
             * @example true
             */
            is_public: boolean;
        };
        /** @description Represents a calculator block with basic information */
        CalculatorBlock: {
            /**
             * @description The label of the block
             * @example Block label
             */
            label: string;
            /**
             * @description The variable name of the block
             * @example block_variable_name
             */
            variable_name: string;
            /**
             * @description The value of the block
             * @example block_value
             */
            value: string;
            /**
             * @description The sort order of the block
             * @example 1
             */
            sort: number;
            /**
             * @description The type of the block
             * @example number
             */
            type?: string;
            /**
             * @description The description of the block
             * @example Block description
             */
            description: string | null;
            /** @description The settings of the block */
            settings: components["schemas"]["CalculatorBlockSettings"];
        };
        /** @description Represents a calculator with basic information */
        Calculator: {
            /**
             * @description The ID of the calculator
             * @example 1
             */
            id: number;
            /**
             * @description The name of the calculator
             * @example Calculator name
             */
            name: string;
            /**
             * @description The description of the calculator
             * @example Calculator description
             */
            description?: string | null;
            /** @description The blocks of the calculator */
            blocks: components["schemas"]["CalculatorBlock"][];
        };
        /** @description Represents the result of a calculator */
        CalculatorResult: {
            /** @description The inputs of the calculator */
            inputs: {
                [key: string]: string;
            };
            /** @description The results of the calculator */
            results: {
                [key: string]: string;
            };
        };
        /** @description Minimal cocktail information */
        CocktailBasic: {
            /**
             * @description The ID of the cocktail
             * @example 1
             */
            id: number;
            /**
             * @description The slug of the cocktail
             * @example old-fashioned-1
             */
            slug: string;
            /**
             * @description The name of the cocktail
             * @example Old fashioned
             */
            name: string;
            /** @description List of short ingredient names */
            short_ingredients?: string[];
            image?: components["schemas"]["Image"];
        };
        /** @description Cocktail ingredient */
        CocktailIngredient: {
            /**
             * @description Sort order of the ingredient
             * @example 1
             */
            sort: number;
            /**
             * Format: float
             * @description Amount of the ingredient
             * @example 30
             */
            amount: number;
            /**
             * Format: float
             * @description Amount of the ingredient
             * @example 60
             */
            amount_max?: number | null;
            /**
             * @description Units of the ingredient
             * @example ml
             */
            units: string;
            /**
             * @description Is the ingredient optional
             * @example false
             */
            optional?: boolean;
            /** @description Ingredient information */
            ingredient: components["schemas"]["IngredientBasic"];
            /** @description Substitutes for the ingredient */
            substitutes?: components["schemas"]["CocktailIngredientSubstitute"][];
            /** @description Variants of the ingredient in the shelf */
            variants_in_shelf?: components["schemas"]["IngredientBasic"][];
            /**
             * @description Additional notes about the ingredient
             * @example Additional notes
             */
            note: string | null;
            /**
             * @description Is the ingredient specified (ignores variants in matching)
             * @example false
             */
            is_specified: boolean;
            formatted: components["schemas"]["AmountFormats"];
            /**
             * @description Is the ingredient in the user's shelf
             * @example true
             */
            in_shelf?: boolean;
            /**
             * @description Is the ingredient in the user's shelf as a variant
             * @example true
             */
            in_shelf_as_variant?: boolean;
            /**
             * @description Is the ingredient in the user's shelf as a substitute
             * @example true
             */
            in_shelf_as_substitute?: boolean;
            /**
             * @description Is the ingredient in the user's shelf as a complex ingredient
             * @example true
             */
            in_shelf_as_complex_ingredient?: boolean;
            /**
             * @description Is the ingredient in the bar shelf
             * @example true
             */
            in_bar_shelf?: boolean;
            /**
             * @description Is the ingredient in the bar shelf as a substitute
             * @example true
             */
            in_bar_shelf_as_substitute?: boolean;
            /**
             * @description Is the ingredient in the bar shelf as a complex ingredient
             * @example true
             */
            in_bar_shelf_as_complex_ingredient?: boolean;
            /**
             * @description Is the ingredient in the bar shelf as a variant
             * @example true
             */
            in_bar_shelf_as_variant?: boolean;
        };
        /** @description Cocktail ingredient substitute */
        CocktailIngredientSubstitute: {
            ingredient: components["schemas"]["IngredientBasic"];
            /** @example 30 */
            amount: number | null;
            /** @example 60 */
            amount_max: number | null;
            /** @example ml */
            units: string | null;
            /** @example true */
            in_shelf: boolean;
            /** @example true */
            in_bar_shelf: boolean;
        };
        /** @description Cocktail method resource */
        CocktailMethod: {
            /**
             * @description Cocktail method ID
             * @example 1
             */
            id: number;
            /**
             * @description Cocktail method name
             * @example Shake
             */
            name: string;
            /**
             * @description Dilution percentage
             * @example 20
             */
            dilution_percentage: number;
            /**
             * @description Number of cocktails using this method
             * @example 32
             */
            cocktails_count?: number;
        };
        /** @description Cocktail price resource */
        CocktailPrice: {
            /**
             * @description Number of ingredients that are missing defined prices in this category
             * @example 2
             */
            missing_prices_count: number;
            price_category: components["schemas"]["PriceCategory"];
            /** @description Total cocktail price, sum of `price_per_pour` amounts */
            total_price: components["schemas"]["Price"];
            /** @description Prices per each ingredient. */
            prices_per_ingredient: {
                ingredient: components["schemas"]["IngredientBasic"];
                /** @description Units used for price calculation */
                units: string;
                /** @description Price per 1 unit of ingredient amount */
                price_per_unit: components["schemas"]["Price"];
                /** @description Price per cocktail ingredient part */
                price_per_use: components["schemas"]["Price"];
            }[];
        };
        /** @description Cocktail resource */
        Cocktail: {
            /**
             * @description Cocktail ID
             * @example 1
             */
            id: number;
            /**
             * @description Cocktail name
             * @example Cocktail name
             */
            name: string;
            /**
             * @description Cocktail slug
             * @example cocktail-name-1
             */
            slug: string;
            /**
             * @description Cocktail instructions
             * @example Step by step instructions
             */
            instructions: string;
            /**
             * @description Cocktail garnish
             * @example Garnish
             */
            garnish: string | null;
            /**
             * @description Cocktail description
             * @example Cocktail description
             */
            description: string | null;
            /**
             * @description Cocktail source
             * @example Source of the recipe
             */
            source: string | null;
            /**
             * @description Public ID of the cocktail
             * @example public-id-1
             */
            public_id: string | null;
            /**
             * Format: date-time
             * @description Public date of the cocktail
             * @example 2023-10-01T12:00:00Z
             */
            public_at: string | null;
            /** @description Cocktail images */
            images?: components["schemas"]["Image"][];
            /** @description Cocktail tags */
            tags?: {
                /**
                 * @description Tag ID
                 * @example 1
                 */
                id: number;
                /**
                 * @description Tag name
                 * @example Tag name
                 */
                name: string;
            }[];
            rating?: {
                /**
                 * @description Current user's rating
                 * @example 1
                 */
                user: number | null;
                /**
                 * @description Average rating
                 * @example 4
                 */
                average: number;
                /** @example 12 */
                total_votes: number;
            };
            /** @description Cocktail glass */
            glass?: components["schemas"]["Glass"] | null;
            /** @description Cocktail utensils */
            utensils?: components["schemas"]["Utensil"][];
            /** @description Cocktail ingredients */
            ingredients?: components["schemas"]["CocktailIngredient"][];
            /**
             * Format: date-time
             * @description Creation date of the cocktail
             * @example 2023-10-01T12:00:00Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update date of the cocktail
             * @example 2023-10-01T12:00:00Z
             */
            updated_at: string | null;
            /** @description Cocktail method */
            method?: components["schemas"]["CocktailMethod"] | null;
            /**
             * Format: float
             * @description Alcohol by volume (ABV) percentage
             * @example 0.5
             */
            abv: number | null;
            /**
             * Format: float
             * @description Cocktail volume in milliliters
             * @example 200
             */
            volume_ml?: number;
            /**
             * Format: float
             * @description Alcohol units in the cocktail
             * @example 1.5
             */
            alcohol_units?: number;
            /**
             * Format: float
             * @description Calories in the cocktail
             * @example 150
             */
            calories?: number;
            /** @description User who created the cocktail */
            created_user?: components["schemas"]["UserBasic"];
            /** @description User who last updated the cocktail */
            updated_user?: components["schemas"]["UserBasic"] | null;
            /**
             * @description Is the cocktail in the user's shelf
             * @example true
             */
            in_shelf?: boolean;
            /**
             * @description Is the cocktail in the bar's shelf
             * @example true
             */
            in_bar_shelf?: boolean;
            /**
             * @description Is the cocktail favorited by the user
             * @example true
             */
            is_favorited?: boolean;
            /** @description User access to the cocktail */
            access?: {
                /**
                 * @description Can the user edit the cocktail
                 * @example true
                 */
                can_edit: boolean;
                /**
                 * @description Can the user delete the cocktail
                 * @example true
                 */
                can_delete: boolean;
                /**
                 * @description Can the user rate the cocktail
                 * @example true
                 */
                can_rate: boolean;
                /**
                 * @description Can the user add a note to the cocktail
                 * @example true
                 */
                can_add_note: boolean;
            };
            /** @description If this cocktail is a variety of existing cocktail, this will reference the original cocktail */
            parent_cocktail?: components["schemas"]["CocktailBasic"] | null;
            /** @description List of varieties of this cocktail */
            varieties?: components["schemas"]["CocktailBasic"][];
            /**
             * @description Cocktail recipe year
             * @example 2023
             */
            year?: number | null;
        };
        /** @description Collection resource */
        Collection: {
            /** @example 1 */
            id: number;
            /** @example Collection name */
            name: string;
            /** @example Collection description */
            description: string | null;
            is_bar_shared: boolean;
            /**
             * Format: date-time
             * @example 2023-05-14T21:23:40.000000Z
             */
            created_at: unknown;
            created_user?: components["schemas"]["UserBasic"];
            cocktails?: components["schemas"]["CocktailBasic"][];
        };
        /** @description Cocktail explore resource */
        CocktailExplore: {
            bar: components["schemas"]["BarBasic"];
            /** @example Cocktail name */
            name: string;
            /** @example Step by step instructions */
            instructions: string;
            /** @example Garnish */
            garnish: string | null;
            /** @example Cocktail description */
            description: string | null;
            /** @example Source of the recipe */
            source: string | null;
            tags: string[];
            glass: string | null;
            utensils: string[];
            method: string | null;
            images: {
                /** @example 1 */
                sort?: number;
                /** @example a1b2c3d4e5f6g7h8i9j0 */
                placeholder_hash?: string;
                /** @example https://example.com/image.jpg */
                url?: string;
                /** @example Image copyright */
                copyright?: string;
            }[];
            ingredients: {
                ingredient?: {
                    /** @example Ingredient name */
                    name?: string;
                };
                /** @example 30 */
                amount?: number;
                /** @example 45 */
                amount_max?: number | null;
                /** @example ml */
                units?: string;
                /** @example true */
                optional?: boolean;
                /** @example Ingredient note */
                note?: string | null;
                substitutes?: {
                    ingredient?: {
                        /** @example Ingredient name */
                        name?: string;
                    };
                    /** @example 30 */
                    amount?: number | null;
                    /** @example 45 */
                    amount_max?: number | null;
                    /** @example ml */
                    units?: string | null;
                }[];
            }[];
            /**
             * Format: float
             * @description Alcohol by volume (ABV) percentage
             * @example 0.5
             */
            abv?: number | null;
        };
        /** @description Export resource */
        Export: {
            /** @example 1 */
            id?: number;
            /** @example cocktails.csv */
            filename?: string;
            /** Format: date-time */
            created_at?: string;
            /** @example Bar name */
            bar_name?: string;
            /** @example true */
            is_done?: boolean;
        };
        /**
         * FeedsRecipe
         * @description Represents a recipe from an RSS/Atom feed
         */
        FeedsRecipe: {
            /** @description The source of the recipe */
            source: string;
            /** @description The title of the recipe */
            title: string;
            /** @description The description of the recipe */
            description: string | null;
            /** @description The link to the recipe */
            link: string;
            /**
             * Format: date-time
             * @description The date the recipe was modified
             */
            date: string | null;
            /** @description The image URL of the recipe */
            image: string | null;
            /** @description Indicates if the recipe supports import into the application */
            supports_recipe_import?: boolean;
        };
        /** @description Represents glassware */
        Glass: {
            /**
             * @description The ID of the glassware
             * @example 1
             */
            id: number;
            /**
             * @description The name of the glassware
             * @example Lowball
             */
            name: string;
            /**
             * @description The description of the glassware
             * @example Glass for smaller cocktails
             */
            description: string | null;
            /**
             * @description The number of cocktails that use this glassware
             * @example 32
             */
            cocktails_count: number;
            /**
             * Format: float
             * @description The volume of the glassware
             * @example 120
             */
            volume: number | null;
            /**
             * @description The volume units of the glassware
             * @example ml
             */
            volume_units: string | null;
            /** @description Glassware images */
            images?: components["schemas"]["Image"][];
        };
        /** @description Image attached to a specific resource */
        Image: {
            /**
             * @description The ID of the image
             * @example 1
             */
            id: number;
            /**
             * @description The file path of the image
             * @example cocktails/1/image.jpg
             */
            file_path: string;
            /**
             * @description The URL of the image
             * @example http://example.com/uploads/cocktails/1/image.jpg
             */
            url: string | null;
            /**
             * @description The thumbnail URL of the image
             * @example http://example.com/uploads/cocktails/1/thumb
             */
            thumb_url?: string | null;
            /**
             * @description The copyright information of the image
             * @example Image copyright
             */
            copyright: string | null;
            /**
             * @description The sort order of the image
             * @example 1
             */
            sort: number;
            /**
             * @description The placeholder hash for the image
             * @example 1QcSHQRnh493V4dIh4eXh1h4kJUI
             */
            placeholder_hash: string | null;
        };
        /** @description Minimal ingredient information */
        IngredientBasic: {
            /**
             * @description The ID of the ingredient
             * @example 1
             */
            id: number;
            /**
             * @description The slug of the ingredient
             * @example gin-1
             */
            slug: string;
            /**
             * @description The name of the ingredient
             * @example Gin
             */
            name: string;
            /** @description Main resource image */
            image?: components["schemas"]["Image"];
        };
        /** @description Ingredient price */
        IngredientPrice: {
            price_category: components["schemas"]["PriceCategory"];
            price: components["schemas"]["Price"];
            /** @example 30 */
            amount: number;
            /** @example ml */
            units: string;
            /** @example Updated price */
            description: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string | null;
        };
        /** @description Represents an ingredient */
        Ingredient: {
            /**
             * @description The ID of the ingredient
             * @example 1
             */
            id: number;
            /**
             * @description The slug of the ingredient
             * @example vodka
             */
            slug: string;
            /**
             * @description The name of the ingredient
             * @example Vodka
             */
            name: string;
            /**
             * Format: float
             * @description The strength of the ingredient
             * @example 40
             */
            strength: number;
            /**
             * @description The description of the ingredient
             * @example Vodka is a clear distilled alcoholic beverage
             */
            description: string | null;
            /**
             * @description The origin of the ingredient
             * @example Russia
             */
            origin: string | null;
            /**
             * Format: date-time
             * @description The creation date of the ingredient
             * @example 2023-01-01T00:00:00Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @description The last update date of the ingredient
             * @example 2023-01-01T00:00:00Z
             */
            updated_at: string | null;
            /**
             * @description The materialized path of the ingredient
             * @example 1.2.3
             */
            materialized_path: string | null;
            /** @description The hierarchy of the ingredient */
            hierarchy: components["schemas"]["IngredientHierarchy"];
            /** @description The images of the ingredient */
            images?: components["schemas"]["Image"][];
            /**
             * @description The color of the ingredient
             * @example #ffffff
             */
            color: string | null;
            /**
             * @description The number of cocktails that use this ingredient
             * @example 12
             */
            cocktails_count?: number;
            /**
             * @description Number of cocktails that use this ingredient as a substitute
             * @example 1
             */
            cocktails_as_substitute_count?: number;
            /** @description The user who created the ingredient */
            created_user?: components["schemas"]["UserBasic"];
            /** @description The user who created the ingredient */
            updated_user?: components["schemas"]["UserBasic"] | null;
            /** @description Access rights for the ingredient */
            access?: {
                /**
                 * @description Whether the user can edit the ingredient
                 * @example true
                 */
                can_edit?: boolean;
                /**
                 * @description Whether the user can delete the ingredient
                 * @example false
                 */
                can_delete?: boolean;
            };
            /**
             * @description Whether the user has this ingredient in their shelf
             * @example true
             */
            in_shelf?: boolean;
            /**
             * @description Whether the user has this ingredient in their shelf as a variant
             * @example true
             */
            in_shelf_as_variant?: boolean;
            /**
             * @description Whether the bar has this ingredient in their shelf
             * @example true
             */
            in_bar_shelf?: boolean;
            /**
             * @description Whether the bar has this ingredient in their shelf as a variant
             * @example true
             */
            in_bar_shelf_as_variant?: boolean;
            /**
             * @description Whether the user has this ingredient in their shopping list
             * @example true
             */
            in_shopping_list?: boolean;
            /** @description Ingredients that this ingredient is used as a substitute for */
            used_as_substitute_for?: components["schemas"]["IngredientBasic"][];
            /** @description Ingredients that can be substituted with this ingredient */
            can_be_substituted_with?: components["schemas"]["IngredientBasic"][];
            /** @description Parts of this ingredient */
            ingredient_parts?: components["schemas"]["IngredientBasic"][];
            /** @description Prices of the ingredient */
            prices?: components["schemas"]["IngredientPrice"][];
            /**
             * @description The calculator ID of the ingredient
             * @example 1
             */
            calculator_id?: number | null;
            /**
             * Format: float
             * @description The sugar content of the ingredient in grams per milliliter
             * @example 0
             */
            sugar_g_per_ml?: number | null;
            /**
             * Format: float
             * @description The acidity of the ingredient
             * @example 0
             */
            acidity?: number | null;
            /**
             * @description The distillery of the ingredient
             * @example Distillery Name
             */
            distillery?: string | null;
            /**
             * @description The units of the ingredient
             * @example ml
             */
            units?: string | null;
        };
        /** @description Represents an ingredient tree with its children */
        IngredientTree: {
            ingredient: components["schemas"]["IngredientBasic"];
            /** @description Recursive list of child ingredients */
            children: components["schemas"]["IngredientTree"][];
        };
        /** @description Menu resource */
        MenuPublic: {
            /** @description Bar information */
            bar: {
                /** @example Bar name */
                name: string;
                /** @example Bar subtitle */
                subtitle: string | null;
                /** @example Bar description */
                description: string | null;
                /**
                 * @description Bar images (like bar logo)
                 * @example [
                 *       "https://example.com/image1.jpg",
                 *       "https://example.com/image2.jpg"
                 *     ]
                 */
                images?: string[];
            };
            /** @description List of menu categories */
            categories: {
                /** @example Category name */
                name: string;
                items: {
                    /** @example false */
                    in_bar_shelf: boolean;
                    type: components["schemas"]["MenuItemTypeEnum"];
                    /** @example 1 */
                    sort: number;
                    price: components["schemas"]["Price"];
                    /** @example 01ARZ3NDEKTSV4RRFFQ69G5FAV */
                    public_id: string | null;
                    /** @example Cocktail name */
                    name: string;
                    description: string | null;
                    /** @description Image URL */
                    image?: string | null;
                }[];
            }[];
        };
        /** @description Menu resource */
        Menu: {
            /**
             * @description Menu ID
             * @example 1
             */
            id: number;
            /**
             * @description Is menu enabled
             * @example true
             */
            is_enabled: boolean;
            /**
             * Format: date-time
             * @description Creation date
             */
            created_at: string;
            /**
             * Format: date-time
             * @description Last update date
             */
            updated_at: string | null;
            categories: {
                /** @example Category name */
                name: string;
                items: {
                    /** @example 1 */
                    id: number;
                    type: components["schemas"]["MenuItemTypeEnum"];
                    /** @example 1 */
                    sort: number;
                    price: components["schemas"]["Price"];
                    /**
                     * @description Cocktail name
                     * @example Cocktail name
                     */
                    name: string;
                    /** @example Cocktail description */
                    description: string | null;
                }[];
            }[];
        };
        /** @description Note resource */
        Note: {
            /**
             * @description Note ID
             * @example 1
             */
            id: number;
            /**
             * @description Note text
             * @example Note text
             */
            note: string;
            /**
             * @description User ID
             * @example 1
             */
            user_id: number;
            /**
             * Format: date-time
             * @description Creation date and time
             * @example 2022-01-01T00:00:00+00:00
             */
            created_at: string;
        };
        /** @description OAuth Credential information */
        OauthCredential: {
            provider: components["schemas"]["SSOProvider"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string | null;
        };
        /** @description Personal Access Token */
        PersonalAccessToken: {
            /** @example 1 */
            id: number;
            /** @example user_generated */
            name: string;
            /** @example [
             *       "cocktails.read",
             *       "cocktails.write",
             *       "ingredients.read",
             *       "ingredients.write"
             *     ] */
            abilities: string[];
            /**
             * Format: date-time
             * @example 2023-05-14T21:23:40.000000Z
             */
            last_used_at: string;
            /**
             * Format: date-time
             * @example 2023-05-14T21:23:40.000000Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2023-05-14T21:23:40.000000Z
             */
            expires_at: string;
        };
        /** @description Price category */
        PriceCategory: {
            /** @example 1 */
            id: number;
            /** @example Amazon (DE) */
            name: string;
            /** @example Current price on amazon.de */
            description: string | null;
            /**
             * Format: ISO 4217
             * @example EUR
             */
            currency: string;
            /** @example € */
            currency_symbol?: string;
        };
        /** @description Schema representing a price */
        Price: {
            /**
             * @description Price in major units (e.g., euros)
             * @example 13.39
             */
            price: number;
            /**
             * @description Price in minor units (e.g., cents)
             * @example 1339
             */
            price_minor: number;
            /**
             * @description Pretty formatted price string
             * @example EUR 13.39
             */
            formatted_price: string;
            /**
             * @description Currency code in ISO 4217 format
             * @example EUR
             */
            currency: string;
        };
        /** @description User profile resource */
        Profile: {
            /** @example 1 */
            id: number;
            /** @example Floral */
            name: string;
            /**
             * Format: email
             * @description User email
             * @example example@example.com
             */
            email: string;
            /**
             * @description Is user subscribed
             * @example true
             */
            is_subscribed: boolean;
            /** @description User memberships */
            memberships: components["schemas"]["BarMembership"][];
            /** @description OAuth credentials */
            oauth_credentials: components["schemas"]["OauthCredential"][];
            settings: components["schemas"]["ProfileSettings"];
        };
        /** @description Public details about a bar */
        PublicBarResource: {
            /**
             * @description Unique number that can be used to reference a specific bar.
             * @example 1
             */
            id: number;
            /**
             * @description Unique string that can be used to reference a specific bar.
             * @example bar-name-1
             */
            slug: string;
            /**
             * @description Name of the bar
             * @example Bar name
             */
            name: string;
            /**
             * @description Optional short quip about the bar
             * @example A short subtitle of a bar
             */
            subtitle: string | null;
            /**
             * @description Description of the bar
             * @example Bar description
             */
            description: string | null;
            /** @description Images associated with the bar */
            images: components["schemas"]["PublicImageResource"][];
            /**
             * @description Whether the bar has enabled its menu for public viewing
             * @example true
             */
            is_menu_enabled: boolean;
        };
        /** @description Public details about a cocktail */
        PublicCocktailResource: {
            /**
             * @description Unique string that can be used to reference a specific cocktail.
             * @example cocktail-name-1
             */
            slug: string;
            /**
             * @description Name of the cocktail
             * @example Cocktail Name
             */
            name: string;
            /**
             * @description Instructions for preparing the cocktail
             * @example Shake well and serve.
             */
            instructions: string;
            /**
             * @description Garnish for the cocktail
             * @example Lemon twist
             */
            garnish: string | null;
            /**
             * @description Description of the cocktail
             * @example A refreshing cocktail with a twist.
             */
            description: string | null;
            /**
             * @description Source of the cocktail recipe
             * @example https://example.com/cocktail-recipe
             */
            source: string | null;
            /**
             * @description Public identifier (ULID) for the cocktail
             * @example 12345
             */
            public_id: string;
            /**
             * Format: date-time
             * @description Date and time when the cocktail was made public
             * @example 2023-10-01T12:00:00Z
             */
            public_at: string | null;
            /** @description Images associated with the cocktail */
            images: components["schemas"]["PublicImageResource"][];
            /** @description Tags associated with the cocktail */
            tags: string[];
            /**
             * @description Type of glass used for the cocktail
             * @example Highball glass
             */
            glass: string | null;
            /** @description Utensils used for preparing the cocktail */
            utensils: string[];
            /**
             * @description Method of preparation for the cocktail
             * @example Shaken
             */
            method: string | null;
            /**
             * @description Dilution percentage associated with the preparation method
             * @example 12
             */
            method_dilution_percentage?: number | null;
            /**
             * @description Total volume of the cocktail in milliliters
             * @example 120
             */
            volume_ml?: number | null;
            /**
             * Format: date-time
             * @description Date and time when the cocktail was created
             * @example 2023-10-01T12:00:00Z
             */
            created_at: string;
            /**
             * @description Indicates if the cocktail can be made in the current bar
             * @example true
             */
            in_bar_shelf?: boolean;
            /**
             * Format: float
             * @description Alcohol by volume percentage of the cocktail
             * @example 0.15
             */
            abv: number | null;
            /**
             * @description Year the cocktail was created or published
             * @example 2023
             */
            year: number | null;
            /** @description List of ingredients required to make the cocktail */
            ingredients: {
                /**
                 * @description Name of the ingredient
                 * @example Gin
                 */
                name: string;
                /**
                 * Format: float
                 * @description Amount of the ingredient in the cocktail
                 * @example 50
                 */
                amount: number;
                /**
                 * Format: float
                 * @description Maximum amount of the ingredient that can be used
                 * @example null
                 */
                amount_max: number | null;
                /**
                 * @description Units of measurement for the ingredient amount
                 * @example ml
                 */
                units: string;
                /** @description Formatted units for the ingredient amount */
                units_formatted: components["schemas"]["AmountFormats"];
                /**
                 * @description Indicates if the ingredient is optional
                 * @example false
                 */
                optional: boolean;
                /**
                 * @description Additional notes about the ingredient
                 * @example Use fresh gin for best results.
                 */
                note: string | null;
                /** @description List of substitute ingredients that can be used in place of this ingredient */
                substitutes: {
                    /**
                     * @description Name of the substitute ingredient
                     * @example Vodka
                     */
                    name: string;
                    /**
                     * Format: float
                     * @description Amount of the substitute ingredient
                     * @example 50
                     */
                    amount: number;
                    /**
                     * Format: float
                     * @description Maximum amount of the substitute ingredient that can be used
                     * @example null
                     */
                    amount_max: number | null;
                    /**
                     * @description Units of measurement for the substitute ingredient amount
                     * @example ml
                     */
                    units: string;
                }[];
            }[];
        };
        /** @description Public details about an image */
        PublicImageResource: {
            /**
             * @description Sort order of the image
             * @example 1
             */
            sort: number;
            /**
             * @description Placeholder hash for the image, used for lazy loading
             * @example abc123
             */
            placeholder_hash: string;
            /**
             * Format: uri
             * @description URL of the image
             * @example https://example.com/image.jpg
             */
            url: string;
            /**
             * @description Copyright information for the image
             * @example Author name
             */
            copyright: string | null;
        };
        /** @description SSO Provider information */
        SSOProvider: {
            /** @example github */
            name: string;
            /** @example GitHub */
            display_name: string;
            /**
             * @description Whether the provider is configured and enabled by server
             * @example true
             */
            enabled: boolean;
        };
        /** @description Subscription resource */
        Subscription: {
            type: string;
            paddle_id: string;
            status: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
            /** Format: date-time */
            paused_at: string;
            /** Format: date-time */
            ends_at: string;
            past_due: boolean;
            is_recurring: boolean;
            next_billed_at: {
                currency: string;
                amount: string;
                /** Format: date-time */
                date: string;
            } | null;
            /** Format: uri */
            update_payment_url: string;
            /** Format: uri */
            cancel_url: string;
            transactions?: {
                total: string;
                tax: string;
                currency: string;
                status: string;
                invoice_number: string;
                /** Format: uri */
                url: string;
                /** Format: date-time */
                billed_at: string;
                /** Format: date-time */
                created_at: string;
                /** Format: date-time */
                updated_at: string | null;
            }[];
        };
        /** @description Represents a tag with basic information */
        Tag: {
            /**
             * @description The ID of the tag
             * @example 1
             */
            id: number;
            /**
             * @description The name of the tag
             * @example Floral
             */
            name: string;
            /**
             * @description The number of cocktails associated with the tag
             * @example 12
             */
            cocktails_count: number;
        };
        /** @description Auth token resource */
        Token: {
            /**
             * @description Access token
             * @example 1|dvWHLWuZbmWWFbjaUDla393Q9jK5Ou9ujWYPcvII
             */
            token: string;
        };
        /** @description Represents a user with basic information */
        UserBasic: {
            /**
             * @description The ID of the user
             * @example 1
             */
            id: number;
            /**
             * @description The name of the user
             * @example Bartender
             */
            name: string;
        };
        /** @description Represents a user in current bar */
        User: {
            /**
             * @description User ID
             * @example 1
             */
            id: number;
            /**
             * @description User name
             * @example Bartender
             */
            name: string;
            /**
             * @description User email
             * @example test@email.com
             */
            email: string;
            /**
             * @description Subscription status
             * @example true
             */
            is_subscribed: boolean;
            role: {
                /**
                 * @description Bar ID
                 * @example 1
                 */
                bar_id: number;
                /**
                 * @description Role ID
                 * @example 1
                 */
                role_id: number | null;
                /**
                 * @description Role name
                 * @example Admin
                 */
                role_name: string | null;
            };
        };
        /** @description Shopping list resource */
        ShoppingList: {
            ingredient: components["schemas"]["IngredientBasic"];
            /** @example 3 */
            quantity: number | null;
        };
        /** @description User subscription resource */
        UserSubscription: {
            prices: string[];
            customer: {
                paddle_id: string | null;
                paddle_email: string | null;
                paddle_name: string | null;
            };
            subscription: components["schemas"]["Subscription"] | null;
        };
        /** @description Represents a utensil with basic information */
        Utensil: {
            /**
             * @description The ID of the utensil
             * @example 1
             */
            id: number;
            /**
             * @description The name of the utensil
             * @example Shaker
             */
            name: string;
            /**
             * @description The description of the utensil
             * @example Used to shake ingredients
             */
            description: string | null;
        };
        /** @enum {string} */
        AbilityEnum: "cocktails.read" | "cocktails.write" | "cocktails.import" | "ingredients.read" | "ingredients.write" | "bars.read" | "bars.write";
        /** @enum {string} */
        BarStatusEnum: "provisioning" | "active" | "deactivated";
        /** @enum {string} */
        CalculatorBlockTypeEnum: "input" | "eval";
        /** @enum {string} */
        MenuItemTypeEnum: "cocktail" | "ingredient";
        APIError: {
            /** @example api_error */
            type: string;
            /** @example Resource record not found. */
            message: string;
        };
        BarRequest: {
            /** @example Bar name */
            name: string;
            /** @example A short subtitle of a bar */
            subtitle?: string | null;
            /** @example Bar description */
            description?: string | null;
            /** @example bar-name-1 */
            slug?: string | null;
            /**
             * @description Used only as a setting for client apps.
             * @example ml
             * @enum {string}
             */
            default_units?: "ml" | "cl" | "oz";
            /**
             * @description ISO 4217 format of currency. Used only as a setting for client apps.
             * @example EUR
             */
            default_currency?: string | null;
            /** @description Enable users with invite code to join this bar. Default `false`. */
            enable_invites?: boolean;
            /** @description List of data that the bar will start with. Cocktails cannot be imported without ingredients. */
            options?: components["schemas"]["BarOptionsEnum"] | null;
            /** @description Existing image ids */
            images?: number[];
            /** @description Allow public access to bar recipes. Default `false`. */
            is_public?: boolean;
        };
        BarSettings: {
            default_units?: string | null;
            default_currency?: string | null;
        };
        BarStats: {
            /** @example 1 */
            total_cocktails: number;
            /** @example 1 */
            total_ingredients: number;
            /** @example 1 */
            total_favorited_cocktails: number;
            /** @example 1 */
            total_shelf_cocktails: number;
            /** @example 1 */
            total_shelf_ingredients: number;
            /** @example 1 */
            total_bar_shelf_ingredients: number;
            /** @example 1 */
            total_bar_shelf_cocktails: number;
            /** @example 1 */
            total_bar_members: number;
            /** @example 1 */
            total_collections: number;
            favorite_tags: {
                /** @example 31 */
                id: number;
                /** @example Tag name */
                name: string;
                /** @example 12 */
                cocktails_count: number;
            }[];
            your_top_ingredients: {
                /** @example 1 */
                id: number;
                /** @example gin */
                slug: string;
                /** @example Gin */
                name: string;
                /** @example 1 */
                cocktails_count: number;
            }[];
            most_popular_ingredients: {
                /** @example 1 */
                id: number;
                /** @example gin */
                slug: string;
                /** @example Gin */
                name: string;
                /** @example 1 */
                cocktails_count: number;
            }[];
            top_rated_cocktails: {
                /** @example 1 */
                id: number;
                /** @example old-fashioned */
                slug: string;
                /** @example Old Fashioned */
                name: string;
                /** @example 3 */
                avg_rating: number;
                /** @example 42 */
                votes: number;
            }[];
        };
        CalculatorBlockRequest: {
            label: string;
            variable_name: string;
            value: string;
            type: components["schemas"]["CalculatorBlockTypeEnum"];
            settings: components["schemas"]["CalculatorBlockSettings"];
            description?: string | null;
            sort: number;
        };
        CalculatorBlockSettings: {
            suffix?: string | null;
            prefix?: string | null;
            decimal_places?: string | null;
        };
        CalculatorRequest: {
            name: string;
            blocks?: components["schemas"]["CalculatorBlockRequest"][];
            description?: string | null;
        };
        CalculatorSolveRequest: {
            inputs: {
                [key: string]: string;
            };
        };
        CocktailIngredientRequest: {
            ingredient_id: number;
            name?: string | null;
            /**
             * Format: float
             * @example 30
             */
            amount: number;
            /** @example ml */
            units: string;
            sort?: number;
            optional?: boolean;
            /** @description Ignores descendants as possible substitutes */
            is_specified?: boolean;
            substitutes?: components["schemas"]["CocktailIngredientSubstituteRequest"][];
            /**
             * Format: float
             * @example 60
             */
            amount_max?: number | null;
            note?: string | null;
        };
        CocktailIngredientSubstituteRequest: {
            ingredient_id: number;
            /**
             * Format: float
             * @example 30
             */
            amount?: number | null;
            /**
             * Format: float
             * @example 60
             */
            amount_max?: number | null;
            /** @example ml */
            units?: string | null;
        };
        CocktailMethodRequest: {
            /** @example Shake */
            name: string;
            /** @example 20 */
            dilution_percentage: number;
        };
        CocktailRequest: {
            /** @example Cocktail name */
            name: string;
            /** @example Step by step instructions */
            instructions: string;
            /** @example Cocktail description */
            description?: string | null;
            /** @example Source of the recipe */
            source?: string | null;
            /** @example Garnish */
            garnish?: string | null;
            /** @example 1 */
            glass_id?: number | null;
            /** @example 1 */
            method_id?: number | null;
            tags?: string[];
            ingredients?: components["schemas"]["CocktailIngredientRequest"][];
            /** @description List of existing image ids */
            images?: number[];
            /** @description List of existing utensil ids */
            utensils?: number[];
            /** @example 1 */
            parent_cocktail_id?: number | null;
            /** @example 2023 */
            year?: number | null;
        };
        CollectionRequest: {
            /** @example Collection name */
            name: string;
            /** @example Collection description */
            description?: string | null;
            is_bar_shared?: boolean;
            cocktails?: number[];
        };
        ExportRequest: {
            type?: components["schemas"]["ExportTypeEnum"];
            units?: components["schemas"]["ForceUnitConvertEnum"];
            bar_id?: number;
        };
        FileDownloadLink: {
            /**
             * @description Absolute URL to download the export
             * @example http://example.com/api/exports/29/download?t=2053f2e716f2dcddc0a2b767249235750e549af6d459cb1c65d4720e72404d88&e=1723480826
             */
            url?: string;
            /** @example 2053f2e716f2dcddc0a2b767249235750e549af6d459cb1c65d4720e72404d88 */
            token?: string;
            /** @example 2024-08-12T16:40:26+00:00 */
            expires?: string;
        };
        GlassRequest: {
            /** @example Lowball */
            name: string;
            /** @example Glass for smaller cocktails */
            description?: string | null;
            /**
             * Format: float
             * @example 120
             */
            volume?: number | null;
            /** @example ml */
            volume_units?: string | null;
            /** @description Existing image ids */
            images?: number[];
        };
        ImageRequest: {
            /**
             * Format: binary
             * @description Image file. Base64 encoded images also supported. Max 50MB
             */
            image: string | null | Blob;
            /** @description Existing image id, used to update an existing image */
            id?: number | null;
            /** @example 1 */
            sort: number;
            /** @example Image copyright */
            copyright?: string | null;
        };
        /** @description Ingredient hierarchy */
        IngredientHierarchy: {
            /**
             * @description Path to the current ingredient from the root
             * @example Spirits > Gin
             */
            path_to_self?: string;
            parent_ingredient?: components["schemas"]["IngredientBasic"] | null;
            descendants?: components["schemas"]["IngredientBasic"][];
            ancestors?: components["schemas"]["IngredientBasic"][];
            /** @description Root ingredient ID */
            root_ingredient_id?: string | null;
        };
        IngredientPriceRequest: {
            price_category_id: number;
            price: number;
            /** Format: float */
            amount: number;
            units: string;
            description?: string | null;
        };
        /** @description Ingredient recommendation with number of potential cocktails */
        IngredientRecommend: components["schemas"]["IngredientBasic"] & {
            /** @example 10 */
            potential_cocktails?: number;
        };
        IngredientRequest: {
            /** @example Gin */
            name: string;
            /**
             * Format: float
             * @example 40
             */
            strength?: number;
            /** @example Gin is a type of alcoholic spirit */
            description?: string | null;
            /** @example Worldwide */
            origin?: string | null;
            /** @example #ffffff */
            color?: string | null;
            /** @example 1 */
            parent_ingredient_id?: number | null;
            /** @description Existing image ids */
            images?: number[];
            /** @description Existing ingredient ids */
            complex_ingredient_part_ids?: number[];
            prices?: components["schemas"]["IngredientPriceRequest"][];
            /**
             * @description Calculator you want to attach to this ingredient
             * @example 1
             */
            calculator_id?: number | null;
            /**
             * Format: float
             * @example 0.24
             */
            sugar_g_per_ml?: number | null;
            /**
             * Format: float
             * @example 0.1
             */
            acidity?: number | null;
            /** @example Buffalo trace */
            distillery?: string | null;
            /**
             * @description Default unit that would be used for this ingredient
             * @example ml
             */
            units?: string | null;
        };
        LoginRequest: {
            /** @example admin@example.com */
            email: string;
            /**
             * Format: password
             * @example password
             */
            password: string;
            /** @example My device */
            token_name?: string | null;
        };
        MenuItemRequest: {
            /** @example 1 */
            id: number;
            type: components["schemas"]["MenuItemTypeEnum"];
            /** @example Category name */
            category_name: string;
            /** @example 1 */
            sort: number;
            /**
             * Format: float
             * @example 22.52
             */
            price: number;
            /**
             * Format: ISO 4217
             * @example EUR
             */
            currency: string;
        };
        MenuRequest: {
            is_enabled: boolean;
            items: components["schemas"]["MenuItemRequest"][];
        };
        NoteRequest: {
            /** @example Note text */
            note: string;
            /** @example 1 */
            resource_id: number;
            /** @example cocktail */
            resource: string;
        };
        PersonalAccessTokenRequest: {
            /** @example user_generated */
            name?: string | null;
            abilities: components["schemas"]["AbilityEnum"][];
            /** @example 2023-05-14T21:23:40.000000Z */
            expires_at?: string | null;
        };
        PriceCategoryRequest: {
            /** @example Amazon (DE) */
            name: string;
            /** @example Current price on amazon.de */
            description?: string | null;
            /**
             * Format: ISO 4217
             * @example EUR
             */
            currency: string;
        };
        ProfileRequest: {
            /** @example Bar Tender */
            name: string;
            /** @example new@email.com */
            email: string;
            settings?: components["schemas"]["ProfileSettings"] | null;
            bar_id?: number | null;
            /**
             * Format: password
             * @example newpassword
             */
            password?: string | null;
            is_shelf_public?: boolean;
        };
        ProfileSettings: {
            language?: string | null;
            theme?: string | null;
        };
        RegisterRequest: {
            /** @example admin@example.com */
            email: string;
            /** @example Bar Tender */
            name: string;
            /**
             * Format: password
             * @example password
             */
            password: string;
        };
        ServerVersion: {
            /**
             * @description Version of the server
             * @example 1.0.0
             */
            version: string;
            /**
             * @description Latest version available on GitHub
             * @example 3.1.0
             */
            latest_version: string;
            /**
             * @description Whether the server is running the latest version
             * @example true
             */
            is_latest: boolean;
            /**
             * @description Environment the server is running in
             * @example production
             */
            type: string;
            /** @example https://search.example.com */
            search_host: string;
            /**
             * @description Version of the search engine
             * @example 1.2.0
             */
            search_version: string;
            /**
             * @description Whether feeds are enabled
             * @example true
             */
            is_feeds_enabled: boolean;
            /**
             * @description Whether password login is enabled
             * @example true
             */
            is_password_login_enabled: boolean;
        };
        ShoppingListRequest: {
            ingredients: {
                id?: number;
                quantity?: number;
            }[];
        };
        TagRequest: {
            /** @example Floral */
            name: string;
        };
        UserRequest: {
            /** @example 1 */
            role_id: number;
            /** @example admin@example.com */
            email: string;
            /** @example Bar Tender */
            name: string;
            /**
             * Format: password
             * @example password
             */
            password: string;
        };
        UtensilRequest: {
            /** @example Shaker */
            name: string;
            /** @example Used to shake ingredients */
            description?: string | null;
        };
        ValidationError: {
            /** @example The cocktail name must be a string. (and 2 more errors) */
            message: string;
            errors: {
                [key: string]: string[];
            };
        };
        /**
         * @description Provides a list of supported SSO providers.
         * @enum {string}
         */
        OauthProvider: "github" | "google" | "gitlab" | "authentik" | "authelia" | "keycloak" | "pocketid" | "zitadel";
        /**
         * Cocktail recipe - Draft 02
         * @description Schema for a cocktail recipe including detailed ingredient data. Draft 02 splits ingredients and recipe data.
         */
        "cocktail-02.schema": {
            recipe: {
                /**
                 * Format: slug
                 * @description The unique identifier for a cocktail
                 * @example margarita
                 */
                _id: string;
                /**
                 * @description Name of the recipe
                 * @example Margarita
                 */
                name: string;
                /**
                 * @description Recipe instructions
                 * @example Shake all ingredients with ice and strain into a chilled glass.
                 */
                instructions: string;
                /**
                 * Format: date-time
                 * @description Date of recipe
                 * @example 2024-07-21T15:30:00Z
                 */
                created_at?: string | null;
                /**
                 * @description Recipe description
                 * @example A refreshing blend of tequila, lime juice, and triple sec.
                 */
                description?: string | null;
                /**
                 * @description Source of the recipe, either URL or Book referece
                 * @example https://example.com/margarita-recipe
                 */
                source?: string | null;
                /**
                 * @description Cocktail garnish
                 * @example Lime wheel
                 */
                garnish?: string | null;
                /**
                 * @description Total ABV of made cocktail
                 * @example 12.5
                 */
                abv?: number | null;
                /**
                 * @description Short keywords to describe cocktail
                 * @example [
                 *       "refreshing",
                 *       "citrus",
                 *       "classic"
                 *     ]
                 */
                tags?: string[];
                /**
                 * @description Glass type
                 * @example Coupe
                 */
                glass?: string | null;
                /**
                 * @description Cocktail method
                 * @example Shake
                 */
                method?: string | null;
                /**
                 * @description Required utensils
                 * @example [
                 *       "Shaker",
                 *       "Strainer"
                 *     ]
                 */
                utensils?: string[];
                /** @description List of cocktail images */
                images?: {
                    /**
                     * Format: uri
                     * @example https://example.com/image.jpg
                     * @example /path/to/image.png
                     */
                    uri: string;
                    /** @description Control the representation of the image */
                    sort?: number;
                    /** @description Computed placeholder hash, like thumbhash, blurhash and similar */
                    placeholder_hash?: string | null;
                    /**
                     * @description Image copyright information
                     * @example © 2024 Bar Assistant
                     */
                    copyright: string;
                }[];
                /** @description List of cocktail ingredients and substitutes */
                ingredients?: {
                    /**
                     * @description The unique reference for an ingredient from `ingredients` property
                     * @example tequila
                     */
                    _id: string;
                    /**
                     * @description Amount of the ingredient
                     * @example 50
                     */
                    amount: number;
                    /**
                     * @description Units for the amount
                     * @example ml
                     */
                    units: string;
                    /**
                     * @description Indicates if the ingredient is optional
                     * @example false
                     */
                    optional?: boolean;
                    /**
                     * @description Maximum amount of the ingredient
                     * @example 60
                     */
                    amount_max?: number | null;
                    /**
                     * @description Additional note related to the cocktail ingredient
                     * @example Preferebly blanco
                     */
                    note?: string | null;
                    substitutes?: {
                        /**
                         * @description The unique reference for an ingredient from `ingredients` property
                         * @example mezcal
                         */
                        _id: string;
                        /**
                         * @description Amount of the substitute ingredient
                         * @example 50
                         */
                        amount?: number | null;
                        /**
                         * @description Units for the amount
                         * @example ml
                         */
                        units?: string | null;
                        /**
                         * @description Maximum amount of the substitute ingredient
                         * @example 60
                         */
                        amount_max?: number | null;
                    }[];
                    /** @description Sort order for the ingredient */
                    sort?: number;
                }[];
            };
            /** @description List of ingredients */
            ingredients: {
                /**
                 * @description The unique identifier for an ingredient, used as a refrence in cocktail ingredient list
                 * @example tequila
                 */
                _id: string;
                /** @example Tequila */
                name: string;
                /**
                 * @description Ingredient ABV
                 * @example 40
                 */
                strength?: number | null;
                /**
                 * @description Additional ingredient information
                 * @example A Mexican spirit made from the blue agave plant.
                 */
                description?: string | null;
                /**
                 * @description Ingredient origin
                 * @example Mexico
                 */
                origin?: string | null;
                /**
                 * @description Category ingredient belongs to
                 * @example Spirit
                 */
                category?: string | null;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    authenticate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Token"];
                    };
                };
            };
            /** @description Unable to authenticate. Possible reasons: invalid credentials, unconfirmed account or disabled password login */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Profile"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    passwordForgot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example admin@example.com */
                    email?: string;
                };
            };
        };
        responses: {
            /** @description Password reset link sent */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unable to send password reset link */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    passwordReset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example token-from-email */
                    token?: string;
                    /** @example admin@example.com */
                    email?: string;
                    /** @example password */
                    password?: string;
                    /** @example password */
                    password_confirmation?: string;
                };
            };
        };
        responses: {
            /** @description Password succssfully reset */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unable to reset password */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    confirmAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a user */
                id: number;
                /** @description Hash string sent to user email */
                hash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account confirmed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listBars: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"][];
                    };
                };
            };
        };
    };
    saveBar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BarRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    showBar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateBar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BarRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    deleteBar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    joinBar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example 01H8S3VH2HTEB3D893AW8NTBBC */
                    invite_code?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listBarMembership: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["BarMembership"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    leaveBar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    removeBarMembership: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
                /** @description Database id of a user */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    transferBarOwnership: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Database id of a user you want to transfer ownership to
                     * @example 1
                     */
                    user_id?: number;
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    toggleBarStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    status?: components["schemas"]["BarStatusEnum"];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    optimizeBar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Reached rate limit. */
            429: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    syncBarDatapack: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Reached rate limit. */
            429: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCalculators: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Calculator"][];
                    };
                };
            };
        };
    };
    saveCalculator: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CalculatorRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Calculator"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showCalculator: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Calculator"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateCalculator: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CalculatorRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Calculator"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteCalculator: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    solveCalculator: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CalculatorSolveRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CalculatorResult"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listCocktails: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
                /** @description Filter by attributes. You can specify multiple matching filter values by passing a comma separated list of values. */
                filter?: {
                    /** @description Filter by cocktail ID(s) */
                    id?: string;
                    /** @description Filter by cocktail names(s) (fuzzy search) */
                    name?: string;
                    /** @description Filter by cocktail ingredient names(s) (fuzzy search) */
                    ingredient_name?: string;
                    /** @description Filter by tag ID(s) */
                    tag_id?: string;
                    /** @description Filter by creator ID(s) */
                    created_user_id?: string;
                    /** @description Filter by glass ID(s) */
                    glass_id?: string;
                    /** @description Filter by cocktail method ID(s) */
                    cocktail_method_id?: string;
                    /** @description Filter by collection ID(s) */
                    collection_id?: string;
                    /** @description Show only user favorites */
                    favorites?: boolean;
                    /** @description Show only cocktails on the user's shelf */
                    on_shelf?: boolean;
                    /** @description Show only cocktails on the bar shelf */
                    bar_shelf?: boolean;
                    /** @description Show only cocktails on the user's shelves. Comma separated list of user IDs */
                    user_shelves?: string;
                    /** @description Show only cocktails that can be made with the given ingredients. Used as on-the-fly custom shelf filter */
                    shelf_ingredients?: string;
                    /** @description Show only cocktails with public links */
                    is_public?: boolean;
                    /** @description Filter by greater than or equal user rating */
                    user_rating_min?: number;
                    /** @description Filter by less than or equal user rating */
                    user_rating_max?: number;
                    /** @description Filter by greater than or equal average rating */
                    average_rating_min?: number;
                    /** @description Filter by less than or equal average rating */
                    average_rating_max?: number;
                    /** @description Filter by greater than or equal ABV */
                    abv_min?: number;
                    /** @description Filter by less than or equal ABV */
                    abv_max?: number;
                    /** @description Show only cocktails whose main ingredient is in the given list. Comma separated list of ingredient IDs */
                    main_ingredient_id?: string;
                    /** @description Filter by total number of ingredients */
                    total_ingredients?: number;
                    /** @description Filter by total number of missing ingredients */
                    missing_ingredients?: number;
                    /** @description Filter by total number of missing bar ingredients */
                    missing_bar_ingredients?: number;
                    /** @description Show cocktails that contain given ingredient ID(s) */
                    specific_ingredients?: string;
                    /** @description Show cocktails that do not contain given ingredient ID(s) */
                    ignore_ingredients?: string;
                };
                /** @description Sort by attributes. Available attributes: `name`, `created_at`, `average_rating`, `user_rating`, `abv`, `total_ingredients`, `missing_ingredients`, `missing_bar_ingredients`, `favorited_at`, `random`. */
                sort?: string;
                /** @description Include additional relationships. Available relations: `glass`, `method`, `user`, `navigation`, `utensils`, `createdUser`, `updatedUser`, `images`, `tags`, `ingredients.ingredient`, `ratings`. */
                include?: string;
            };
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["Cocktail"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    saveCocktail: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    showCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    deleteCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    toggleCocktailFavorite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example true */
                            is_favorited?: boolean;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    createCocktailPublicLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteCocktailPublicLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    shareCocktail: {
        parameters: {
            query?: {
                /** @description Share format */
                type?: "json" | "json-ld" | "yaml" | "yml" | "xml" | "text" | "markdown" | "md";
                /** @description Units of measurement */
                units?: string;
            };
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /** @example json */
                            type: string;
                            /** @example <content in requested format> */
                            content: string;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showSimilarCocktails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    copyCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    getCocktailPrices: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailPrice"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listCocktailMethods: {
        parameters: {
            query?: {
                /** @description Filter by attributes */
                filter?: {
                    name?: string;
                };
            };
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"][];
                    };
                };
            };
        };
    };
    saveCocktailMethod: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailMethodRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showCocktailMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateCocktailMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailMethodRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteCocktailMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listCollections: {
        parameters: {
            query?: {
                /** @description Filter by attributes */
                filter?: {
                    id?: number;
                    name?: string;
                    cocktail_id?: string;
                };
                /** @description Include additional relationships. Available relations: `cocktails`. */
                include?: string;
                /** @description Sort by attributes. Available attributes: `name`, `created_at`. */
                sort?: string;
            };
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"][];
                    };
                };
            };
        };
    };
    saveCollection: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CollectionRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listSharedCollections: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CollectionRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    syncCocktailsInCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    cocktails?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showPublicCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Public cocktail id */
                public_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailExplore"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listExports: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Export"][];
                    };
                };
            };
        };
    };
    saveExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Export"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Reached rate limit. */
            429: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteExport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    downloadExport: {
        parameters: {
            query: {
                /** @description Token */
                t: string;
                /** @description Timestamp */
                e: string;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    /** @example binary */
                    "application/octet-stream": unknown;
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    generateExportDownloadLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["FileDownloadLink"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listFeeds: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["FeedsRecipe"][];
                    };
                };
            };
        };
    };
    listGlassware: {
        parameters: {
            query?: {
                /** @description Filter by attributes */
                filter?: {
                    name?: string;
                };
                /** @description Sort by attributes. Available attributes: `name`, `created_at`. */
                sort?: string;
            };
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"][];
                    };
                };
            };
        };
    };
    saveGlassware: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GlassRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showGlassware: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateGlassware: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GlassRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteGlassware: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listImages: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["Image"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    uploadImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    images: components["schemas"]["ImageRequest"][];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"][];
                    };
                };
            };
        };
    };
    showImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["ImageRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    getImageThumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "image/jpg": string;
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    importCocktail: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Valid JSON structure to import. */
                    source?: string;
                    /** @description How to handle duplicates. Cocktails are matched by lowercase name. */
                    duplicate_actions?: components["schemas"]["DuplicateActionsEnum"];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Reached rate limit. */
            429: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    scrapeRecipe: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example https://www.example.com/recipe-url */
                    source: string;
                    /** @example <p>HTML content</p> */
                    html_content?: string | null;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /** @example draft2 */
                            schema_version: string;
                            schema: components["schemas"]["cocktail-02.schema"];
                            scraper_meta: {
                                _id: string;
                                source: string;
                                /** @description The HTML content of the scraped page, if available. */
                                html_content?: string | null;
                            }[];
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    importIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "text/csv": unknown;
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description CSV file
                     */
                    source: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listIngredients: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
                /** @description Filter by attributes. You can specify multiple matching filter values by passing a comma separated list of values. */
                filter?: {
                    /** @description Filter by ingredient id(s) */
                    id?: string;
                    /** @description Filter by ingredient name(s) (fuzzy search) */
                    name?: string;
                    /** @description Filter by ingredient name(s) (exact match) */
                    name_exact?: string;
                    /** @description Filter by ingredient origin */
                    origin?: string;
                    /** @description Filter by user(s) who created the ingredient */
                    created_user_id?: string;
                    /** @description Show only ingredients that are on the shopping list */
                    on_shopping_list?: boolean;
                    /** @description Show only ingredients that are on the shelf */
                    on_shelf?: boolean;
                    /** @description Show only ingredients that are on the bar shelf */
                    bar_shelf?: boolean;
                    /**
                     * Format: float
                     * @description Show only ingredients with strength greater than or equal to given value
                     */
                    strength_min?: number;
                    /**
                     * Format: float
                     * @description Show only ingredients with strength less than or equal to given value
                     */
                    strength_max?: number;
                    /** @description Show only ingredients that are used as main ingredients in cocktails */
                    main_ingredients?: boolean;
                    /** @description Show only ingredients that can be made with other ingredients */
                    complex?: boolean;
                    /** @description Show only direct children of given ingredient. Use null as value to get ingredients without parent ingredient */
                    parent_ingredient_id?: string;
                    /** @description Show all descendants of given ingredient(s) */
                    descendants_of?: string;
                };
                /** @description Sort by attributes. Available attributes: `name`, `created_at`, `strength`, `total_cocktails`. */
                sort?: string;
                /** @description Include additional relationships. Available relations: `parentIngredient`, `varieties`, `prices`, `ingredientParts`, `descendants`, `ancestors`, `images`. */
                include?: string;
            };
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["Ingredient"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    saveIngredient: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Ingredient"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showIngredient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Ingredient"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateIngredient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Ingredient"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteIngredient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    extraIngredients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailBasic"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    ingredientCocktails: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["CocktailBasic"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    ingredientSubstitutes: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["IngredientBasic"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showIngredientTree: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientTree"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showMenu: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Menu"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateMenu: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MenuRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Menu"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    publicMenu: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Bar database slug */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["MenuPublic"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    exportMenu: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "text/csv": string;
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listNotes: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["Note"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    saveNote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Note"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Note"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PersonalAccessToken"][];
                    };
                };
            };
        };
    };
    saveToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonalAccessTokenRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Token"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listPriceCategories: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"][];
                    };
                };
            };
        };
    };
    savePriceCategory: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PriceCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "10017aa4f043f641c210bafc56092997": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updatePriceCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PriceCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deletePriceCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Profile"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Profile"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteSSO: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Provider ID */
                provider: components["schemas"]["OauthProvider"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showPublicBar: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
            };
            header?: never;
            path: {
                /** @description Database id of bar */
                slugOrId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PublicBarResource"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listPublicBarCocktails: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Filter by attributes. You can specify multiple matching filter values by passing a comma separated list of values. */
                filter?: {
                    /** @description Filter by cocktail names(s) (fuzzy search) */
                    name?: string;
                    /** @description Filter by cocktail ingredient names(s) (fuzzy search) */
                    ingredient_name?: string;
                    /** @description Filter by cocktail tag name(s) (fuzzy search) */
                    tag?: string;
                    /** @description Filter by cocktail glass type name(s) (fuzzy search) */
                    glass?: string;
                    /** @description Filter by cocktail method name(s) (fuzzy search) */
                    method?: string;
                    /** @description Show only cocktails on the bar shelf */
                    bar_shelf?: boolean;
                    /** @description Filter by greater than or equal ABV. Use >=, >, <=, < operators (e.g., `filter[abv]=>=20` to get cocktails with ABV greater than or equal to 20). */
                    abv?: number;
                };
                /** @description Sort by attributes. Available attributes: `name`, `created_at`, `abv`, `random`. */
                sort?: string;
            };
            header?: never;
            path: {
                /** @description Database id or slug of bar */
                slugOrId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["PublicCocktailResource"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showPublicBarCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of bar */
                slugOrId: string;
                /** @description Cocktail slug or public id (ULID) */
                slugOrPublicId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PublicCocktailResource"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    rateCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    rating?: number;
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteRating: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    recommendCocktails: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailBasic"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    ssoRedirect: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Provider ID */
                provider: components["schemas"]["OauthProvider"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Redirect response */
            302: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    ssoCallback: {
        parameters: {
            query: {
                /** @description Oauth token */
                code: string;
            };
            header?: never;
            path: {
                /** @description Provider ID */
                provider: components["schemas"]["OauthProvider"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Token"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    ssoProviders: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["SSOProvider"][];
                    };
                };
            };
        };
    };
    showServerVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ServerVersion"];
                    };
                };
            };
        };
    };
    listUserIngredients: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["IngredientBasic"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    listUserShelfCocktails: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["CocktailBasic"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    listUserFavoriteCocktails: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["CocktailBasic"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    batchStoreUserIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    batchDeleteUserIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    recommendIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientRecommend"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listBarShelfIngredients: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["IngredientBasic"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    batchStoreBarShelfIngredients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    batchDeleteBarShelfIngredients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listBarShelfCocktails: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The data for the current page */
                        data?: components["schemas"]["CocktailBasic"][];
                        /** @description Links for pagination */
                        links?: {
                            /** @description Link to the first page */
                            first?: string | null;
                            /** @description Link to the last page */
                            last?: string | null;
                            /** @description Link to the previous page */
                            prev?: string | null;
                            /** @description Link to the next page */
                            next?: string | null;
                        };
                        meta?: {
                            /** @description The current page number */
                            current_page?: number;
                            /** @description The starting index of the current page */
                            from?: number;
                            /** @description The last page number */
                            last_page?: number;
                            links?: {
                                /** @description The URL of the link */
                                url?: string | null;
                                /** @description The label of the link */
                                label?: string | null;
                                /** @description Whether the link is active */
                                active?: boolean | null;
                            }[];
                            /** @description The path of the current page */
                            path?: string;
                            /** @description The number of items per page */
                            per_page?: number;
                            /** @description The ending index of the current page */
                            to?: number;
                            /** @description The total number of items */
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    recommendBarIngredients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientRecommend"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listShoppingListIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ShoppingList"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    batchStoreShoppingListIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShoppingListRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    batchDeleteShoppingListIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: {
                        id?: number;
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    shareShoppingList: {
        parameters: {
            query?: {
                /** @description Type of share. Available types: `markdown`. */
                type?: string;
            };
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /** @example markdown */
                            type: string;
                            /** @example <content in requested format> */
                            content: string;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showBarStats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["BarStats"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["UserSubscription"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    type: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listTags: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"][];
                    };
                };
            };
        };
    };
    saveTag: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listUsers: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"][];
                    };
                };
            };
        };
    };
    saveUser: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showUser: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listUtensils: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"][];
                    };
                };
            };
        };
    };
    saveUtensil: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UtensilRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showUtensil: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateUtensil: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UtensilRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteUtensil: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
}
