/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get auth config
         * @description Get local and OAuth configuration
         */
        get: operations["auth-config"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate user
         * @description Authenticate user and get auth token
         */
        post: operations["authenticate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout currently authenticated user
         */
        post: operations["logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register
         * @description Register a new user
         */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/forgot-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request password reset
         * @description Request a new password reset link
         */
        post: operations["passwordForgot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/reset-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset password
         * @description Reset user password
         */
        post: operations["passwordReset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/verify/{id}/{hash}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Confirm account
         * @description Confirm user account, if applicable
         */
        get: operations["confirmAccount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List bars
         * @description Show a list of bars user has access to. Includes bars that user has made and bars he is a member of.
         */
        get: operations["listBars"];
        put?: never;
        /**
         * Create bar
         * @description Create a new bar
         */
        post: operations["saveBar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show bar
         * @description Show information about a specific bar
         */
        get: operations["showBar"];
        /**
         * Update bar
         * @description Update a specific bar
         */
        put: operations["updateBar"];
        post?: never;
        /**
         * Delete bar
         * @description Delete a specific bar
         */
        delete: operations["deleteBar"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Join a bar
         * @description Join a bar via invite code
         */
        post: operations["joinBar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/memberships": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List members
         * @description List all bar members
         */
        get: operations["listBarMembership"];
        put?: never;
        post?: never;
        /**
         * Leave a bar
         * @description Deletes a user's membership to a bar
         */
        delete: operations["leaveBar"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/memberships/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove member
         * @description Removes a specific user's membership from a bar
         */
        delete: operations["removeBarMembership"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/transfer": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Transfer ownership
         * @description Transfer a bar to another user.
         */
        post: operations["transferBarOwnership"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update status
         * @description Update current status of a bar
         */
        post: operations["toggleBarStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List cocktails
         * @description Show a list of all cocktails in a bar
         */
        get: operations["listCocktails"];
        put?: never;
        /**
         * Create cocktail
         * @description Create a new cocktail
         */
        post: operations["saveCocktail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show cocktail
         * @description Show details of a specific cocktail
         */
        get: operations["showCocktail"];
        /**
         * Update cocktail
         * @description Update a specific cocktail
         */
        put: operations["updateCocktail"];
        post?: never;
        /**
         * Delete cocktail
         * @description Delete a specific cocktail
         */
        delete: operations["deleteCocktail"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/toggle-favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Toggle favorite
         * @description Marks cocktail as users favorite. Can be called again to remove the favorite.
         */
        post: operations["toggleCocktailFavorite"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/public-link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a public ID
         * @description Create a public link that can be shared
         */
        post: operations["createCocktailPublicLink"];
        /**
         * Delete public link
         * @description Delete a cocktail public link
         */
        delete: operations["deleteCocktailPublicLink"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Share cocktail
         * @description Get cocktail details in a specific shareable format
         */
        get: operations["shareCocktail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/similar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show similar cocktails
         * @description Shows similar cocktails to the given cocktail. Prefers cocktails with same base ingredient.
         */
        get: operations["showSimilarCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/copy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Copy cocktail
         * @description Create a copy of a cocktail
         */
        post: operations["copyCocktail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/prices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show cocktail prices
         * @description Show calculated prices categorized by bar price categories. Prices are calculated using ingredient prices. If price category is missing, the ingredients don't have a price in that category. If there are multiple prices in category, the minimum price is used. Keep in mind that the price is just an estimate and might not be accurate.
         */
        get: operations["getCocktailPrices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktail-methods": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List methods
         * @description Show a list of all cocktail methods in a bar
         */
        get: operations["listCocktailMethods"];
        put?: never;
        /**
         * Create method
         * @description Create a new cocktail method
         */
        post: operations["saveCocktailMethod"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktail-methods/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show method
         * @description Show a specific cocktail method
         */
        get: operations["showCocktailMethod"];
        /**
         * Update method
         * @description Update a specific cocktail method
         */
        put: operations["updateCocktailMethod"];
        post?: never;
        /**
         * Delete method
         * @description Delete a specific cocktail method
         */
        delete: operations["deleteCocktailMethod"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List collections
         * @description Show a list of all user collections in a specific bar
         */
        get: operations["listCollections"];
        put?: never;
        /**
         * Create collection
         * @description Create a new collection
         */
        post: operations["saveCollection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/collections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List shared collections
         * @description Show a list of all collections that users shared with the bar
         */
        get: operations["listSharedCollections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show collection
         * @description Show a specific collection
         */
        get: operations["showCollection"];
        /**
         * Update collection
         * @description Update a specific collection
         */
        put: operations["updateCollection"];
        post?: never;
        /**
         * Delete collection
         * @description Delete a specific collection
         */
        delete: operations["deleteCollection"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/collections/{id}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Sync cocktails in a collection
         * @description Used to updated/add/delete cocktails in a collection. To delete all cocktails pass an empty array.
         */
        put: operations["syncCocktailsInCollection"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/explore/cocktails/{public_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show cocktail
         * @description Show details from a cocktail using a public id
         */
        get: operations["showPublicCocktail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List exports
         * @description Show a list of all generated exports in a bar
         */
        get: operations["listExports"];
        put?: never;
        /**
         * Create export
         * @description Start a new export process
         */
        post: operations["saveExport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete export
         * @description Delete a specific export
         */
        delete: operations["deleteExport"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/exports/{id}/download": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download export
         * @description Download a specific export
         */
        get: operations["downloadExport"];
        put?: never;
        /**
         * Generate link
         * @description Generates a publicly accessible download link for the export. The link will be valid for 1 minute by default.
         */
        post: operations["generateExportDownloadLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/glasses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List glassware
         * @description Show a list of all glassware in the bar
         */
        get: operations["listGlassware"];
        put?: never;
        /**
         * Create glassware
         * @description Create a new glassware
         */
        post: operations["saveGlassware"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/glasses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show glassware
         * @description Show a specific glassware
         */
        get: operations["showGlassware"];
        /**
         * Update glassware
         * @description Update a specific glassware
         */
        put: operations["updateGlassware"];
        post?: never;
        /**
         * Delete glassware
         * @description Delete a specific glassware
         */
        delete: operations["deleteGlassware"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List images
         * @description List all images uploaded by the authenticated user
         */
        get: operations["listImages"];
        put?: never;
        /**
         * Upload image
         * @description Used to upload multiple images at once. Uploaded images via this endpoint will not be attached to any resource. Images are converted to WebP format with 85% quality of the original image.
         */
        post: operations["uploadImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show image
         * @description Show a single image
         */
        get: operations["showImage"];
        put?: never;
        /**
         * Update image
         * @description Update a specific image
         */
        post: operations["updateImage"];
        /**
         * Delete image
         * @description Delete a specific image
         */
        delete: operations["deleteImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/{id}/thumb": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get thumbnail
         * @description Generate a thumbnail of a specific image
         */
        get: operations["getImageThumbnail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import/cocktail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import recipe
         * @description Import a recipe from a JSON structure that follows Bar Assistant recipe JSON schema. Supported schemas include [Draft 2](https://barassistant.app/cocktail-02.schema.json) and [Draft 1](https://barassistant.app/cocktail-01.schema.json).
         */
        post: operations["importCocktail"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import/scrape": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Scrape recipe
         * @description Try to scrape a recipe from a website. Most of the well known recipe websites should work. Data returned is a valid JSON schema that you can import using import cocktail endpoint.
         */
        post: operations["scrapeRecipe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/import/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import ingredients
         * @description Import ingredients from a CSV source
         */
        post: operations["importIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredient-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ingredient categories
         * @description List all ingredient categories in a bar
         */
        get: operations["listIngredientCategories"];
        put?: never;
        /**
         * Create ingredient category
         * @description Create a specific ingredient category
         */
        post: operations["saveIngredientCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredient-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show ingredient category
         * @description Show a specific ingredient category
         */
        get: operations["showIngredientCategory"];
        /**
         * Update ingredient category
         * @description Update a specific ingredient category
         */
        put: operations["updateIngredientCategory"];
        post?: never;
        /**
         * Delete ingredient category
         * @description Delete a specific ingredient category
         */
        delete: operations["deleteIngredientCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ingredients
         * @description Show a list of all ingredients in a bar
         */
        get: operations["listIngredients"];
        put?: never;
        /**
         * Create ingredient
         * @description Create a new ingredient
         */
        post: operations["saveIngredient"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show ingredient
         * @description Show a specific ingredient
         */
        get: operations["showIngredient"];
        /**
         * Update ingredient
         * @description Update a specific ingredient
         */
        put: operations["updateIngredient"];
        post?: never;
        /**
         * Delete ingredient
         * @description Delete a specific ingredient
         */
        delete: operations["deleteIngredient"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}/extra": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Extra cocktails
         * @description Show a list of extra cocktails you can make if you add given ingredient to your shelf
         */
        get: operations["extraIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List cocktails
         * @description List all cocktails that use this ingredient
         */
        get: operations["ingredientCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ingredients/{id}/substitutes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ingredient substitutes
         * @description Show a list of ingredients that are used as a substitute for this ingredient in cocktail recipes.
         */
        get: operations["ingredientSubstitutes"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show menu
         * @description Show a bar menu
         */
        get: operations["showMenu"];
        put?: never;
        /**
         * Update menu
         * @description Update bar menu
         */
        post: operations["updateMenu"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/explore/menus/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show public menu
         * @description Show a public bar menu details
         */
        get: operations["publicMenu"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/menu/export": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Export menu
         * @description Export menu as CSV
         */
        get: operations["exportMenu"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List notes
         * @description Show list of all user notes
         */
        get: operations["listNotes"];
        put?: never;
        /**
         * Create note
         * @description Create a new note
         */
        post: operations["saveNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show note
         * @description Show a single note
         */
        get: operations["showNote"];
        put?: never;
        post?: never;
        /**
         * Delete note
         * @description Delete a single note
         */
        delete: operations["deleteNote"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate user with OAuth
         * @description Authenticate user with OAuth login and get auth token
         */
        post: operations["oauth-login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/accounts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List OAuth accounts
         * @description Show list of all user OAuth accounts
         */
        get: operations["listOAuthAccounts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/oauth/accounts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unlink OAuth Account
         * @description Unlink an OAuth account
         */
        delete: operations["unlinkOAuthAccount"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tokens
         * @description List all personal access tokens
         */
        get: operations["listTokens"];
        put?: never;
        /**
         * Create token
         * @description Create a new personal access token
         */
        post: operations["saveToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Revoke token
         * @description Revoke a personal access token
         */
        delete: operations["deleteToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/price-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List price categories
         * @description List all price categories in a bar
         */
        get: operations["listPriceCategories"];
        put?: never;
        /**
         * Create price category
         * @description Create a new price category
         */
        post: operations["savePriceCategory"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/price-categories/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show price category
         * @description Show a single price category
         */
        get: operations["10017aa4f043f641c210bafc56092997"];
        /**
         * Update price category
         * @description Update a single price category
         */
        put: operations["updatePriceCategory"];
        post?: never;
        /**
         * Delete price category
         * @description Delete a single price category
         */
        delete: operations["deletePriceCategory"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show profile
         * @description Show current user profile information
         */
        get: operations["showProfile"];
        put?: never;
        /**
         * Update profile
         * @description Update user profile
         */
        post: operations["updateProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cocktails/{id}/ratings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rate cocktail
         * @description Rate a single cocktail
         */
        post: operations["rateCocktail"];
        /**
         * Delete cocktail rating
         * @description Delete current user cocktail rating
         */
        delete: operations["deleteRating"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/server/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show information
         * @description Show server status and information
         */
        get: operations["showServerVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user ingredients
         * @description Ingredients that user saved to their shelf
         */
        get: operations["listUserIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List shelf cocktails
         * @description Cocktails that the user can make with ingredients on their shelf
         */
        get: operations["listUserShelfCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/cocktails/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List favorites
         * @description Show a list of cocktails user has favorited
         */
        get: operations["listUserFavoriteCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients/batch-store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save user ingredients
         * @description Save multiple ingredients to user shelf
         */
        post: operations["batchStoreUserIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients/batch-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete user ingredients
         * @description Delete multiple ingredients from user shelf
         */
        post: operations["batchDeleteUserIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/ingredients/recommend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Recommend user ingredients
         * @description Shows a list of ingredients that will increase total shelf cocktails when added to user shef
         */
        get: operations["recommendIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List bar shelf ingredients
         * @description Ingredients that bar has in it's shelf
         */
        get: operations["listBarShelfIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/ingredients/batch-store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Save bar ingredients
         * @description Save multiple ingredients to bar shelf
         */
        post: operations["batchStoreBarShelfIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/ingredients/batch-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete bar ingredients
         * @description Delete multiple ingredients from bar shelf
         */
        post: operations["batchDeleteBarShelfIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/cocktails": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List bar shelf cocktails
         * @description Cocktails that the bar can make with ingredients on their shelf
         */
        get: operations["listBarShelfCocktails"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/ingredients/recommend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Recommend bar ingredients
         * @description Shows a list of ingredients that will increase total bar shelf cocktails when added to bar shef
         */
        get: operations["recommendBarIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show shopping list
         * @description List all ingredients on a shopping list
         */
        get: operations["listShoppingListIngredients"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list/batch-store": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add ingredients
         * @description Add multiple ingredients to a shopping list
         */
        post: operations["batchStoreShoppingListIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list/batch-delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete ingredients
         * @description Remove multiple ingredients from shopping list
         */
        post: operations["batchDeleteShoppingListIngredients"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}/shopping-list/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Share shopping list
         * @description Get a shopping list in a specific format
         */
        get: operations["shareShoppingList"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/bars/{id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show bar stats
         * @description Show detailed stats about a single bar
         */
        get: operations["showBarStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/billing/subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show subscription
         * @description Show a subscription status
         */
        get: operations["showSubscription"];
        put?: never;
        /**
         * Update subscription
         * @description Update user billing subscription
         */
        post: operations["updateSubscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List tags
         * @description Show a list of tags in a bar
         */
        get: operations["listTags"];
        put?: never;
        /**
         * Create tag
         * @description Create a new tag
         */
        post: operations["saveTag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show tag
         * @description Show a single tag
         */
        get: operations["showTag"];
        /**
         * Update tag
         * @description Update a single tag
         */
        put: operations["updateTag"];
        post?: never;
        /**
         * Delete tag
         * @description Delete a single tag
         */
        delete: operations["deleteTag"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description Show a list of all users in a bar
         */
        get: operations["listUsers"];
        put?: never;
        /**
         * Create user
         * @description Create a new user
         */
        post: operations["saveUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show user
         * @description Show a single user
         */
        get: operations["showUser"];
        /**
         * Update user
         * @description Update a single user
         */
        put: operations["updateUser"];
        post?: never;
        /**
         * Delete user
         * @description Delete a single user
         */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/utensils": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List utensils
         * @description List all utensils in a bar
         */
        get: operations["listUtensils"];
        put?: never;
        /**
         * Create utensil
         * @description Create a new utensil
         */
        post: operations["saveUtensil"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/utensils/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Show utensil
         * @description Show a single utensil
         */
        get: operations["showUtensil"];
        /**
         * Update utensil
         * @description Update a single utensil
         */
        put: operations["updateUtensil"];
        post?: never;
        /**
         * Delete utensil
         * @description Delete a single utensil
         */
        delete: operations["deleteUtensil"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        BarOptionsEnum: "ingredients" | "cocktails";
        /** @enum {string} */
        ExportTypeEnum: "datapack" | "schema" | "md" | "json-ld" | "xml" | "yaml";
        /** @enum {string} */
        ForceUnitConvertEnum: "none" | "ml" | "oz" | "cl";
        /** @enum {string} */
        DuplicateActionsEnum: "none" | "skip" | "overwrite";
        /** @enum {string} */
        AbilityEnum: "cocktails.read" | "cocktails.write" | "ingredients.read" | "ingredients.write";
        /** @enum {string} */
        BarStatusEnum: "provisioning" | "active" | "deactivated";
        APIError: {
            /** @example api_error */
            type: string;
            /** @example Resource record not found. */
            message: string;
        };
        AuthConfig: {
            /** @example true|false */
            allowRegistration: boolean;
            /** @example true|false */
            localLoginEnabled: boolean;
            /** @example true|false */
            oauthLoginEnabled: boolean;
            /** @example true|false */
            oauthLoginSelfRegistrationEnabled: boolean;
            oauthProviders?: components["schemas"]["OAuthProvider"][];
        };
        Bar: {
            /** @example 1 */
            id: number;
            /** @example bar-name-1 */
            slug: string;
            /** @example Bar name */
            name: string;
            /** @example A short subtitle of a bar */
            subtitle: string | null;
            /** @example Bar description */
            description: string | null;
            /** @example 01H8S3VH2HTEB3D893AW8NTBBC */
            invite_code: string | null;
            status: components["schemas"]["BarStatusEnum"];
            settings: {
                [key: string]: unknown;
            }[];
            search_host: string | null;
            search_token: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string | null;
            created_user?: components["schemas"]["UserBasic"];
            updated_user?: components["schemas"]["UserBasic"] | null;
            access: {
                /** @example 1 */
                role_id?: number;
                /** @example true */
                can_edit?: boolean;
                /** @example true */
                can_delete?: boolean;
                /** @example true */
                can_activate?: boolean;
                /** @example true */
                can_deactivate?: boolean;
            }[];
        };
        BarBasic: {
            /** @example 1 */
            id: number;
            /** @example bar-name-1 */
            slug: string;
            /** @example Bar name */
            name: string;
            /** @example Bar subtitle */
            subtitle: string;
        };
        BarMembership: {
            /** @example 1 */
            user_id: number;
            /** @example Bartender */
            user_name: string;
            /** @example 1 */
            bar_id: number;
            /** @example true */
            is_shelf_public: boolean;
            /** @example true */
            use_parent_as_substitute: boolean;
        };
        BarRequest: {
            /** @example Bar name */
            name: string;
            /** @example A short subtitle of a bar */
            subtitle?: string | null;
            /** @example Bar description */
            description?: string | null;
            /** @example bar-name-1 */
            slug?: string;
            /**
             * @description Used only as a setting for client apps.
             * @example ml
             * @enum {string}
             */
            default_units?: "ml" | "cl" | "oz";
            /**
             * @description Locale code, used only as a setting for client apps, does not change language of the API.
             * @example en-US
             */
            default_lang?: string | null;
            /** @description Enable users with invite code to join this bar. Default `false`. */
            enable_invites?: boolean;
            /** @description List of data that the bar will start with. Cocktails cannot be imported without ingredients. */
            options?: components["schemas"]["BarOptionsEnum"];
        };
        BarStats: {
            /** @example 1 */
            total_cocktails: number;
            /** @example 1 */
            total_ingredients: number;
            /** @example 1 */
            total_favorited_cocktails: number;
            /** @example 1 */
            total_shelf_cocktails: number;
            /** @example 1 */
            total_shelf_ingredients: number;
            /** @example 1 */
            total_bar_shelf_ingredients: number;
            /** @example 1 */
            total_bar_shelf_cocktails: number;
            /** @example 1 */
            total_bar_members: number;
            /** @example 1 */
            total_collections: number;
            favorite_tags: {
                /** @example 31 */
                id: number;
                /** @example Tag name */
                name: string;
                /** @example 12 */
                cocktails_count: number;
            }[];
            your_top_ingredients: {
                /** @example 1 */
                id: number;
                /** @example gin */
                slug: string;
                /** @example Gin */
                name: string;
                /** @example 1 */
                cocktails_count: number;
            }[];
            most_popular_ingredients: {
                /** @example 1 */
                id: number;
                /** @example gin */
                slug: string;
                /** @example Gin */
                name: string;
                /** @example 1 */
                cocktails_count: number;
            }[];
            top_rated_cocktails: {
                /** @example 1 */
                id: number;
                /** @example old-fashioned */
                slug: string;
                /** @example Old Fashioned */
                name: string;
                /** @example 3 */
                avg_rating: number;
                /** @example 42 */
                votes: number;
            }[];
        };
        Cocktail: {
            /** @example 1 */
            id: number;
            /** @example Cocktail name */
            name: string;
            /** @example cocktail-name-1 */
            slug: string;
            /** @example Step by step instructions */
            instructions: string;
            /** @example Garnish */
            garnish: string | null;
            /** @example Cocktail description */
            description: string | null;
            /** @example Source of the recipe */
            source: string | null;
            /** @example public-id-1 */
            public_id: string | null;
            /** Format: date-time */
            public_at: string | null;
            images?: components["schemas"]["Image"][];
            tags?: {
                /** @example 1 */
                id?: number;
                /** @example Tag name */
                name?: string;
            }[];
            rating?: {
                /**
                 * @description Current user's rating
                 * @example 1
                 */
                user: number | null;
                /**
                 * @description Average rating
                 * @example 4
                 */
                average: number;
                /** @example 12 */
                total_votes: number;
            };
            glass?: components["schemas"]["Glass"] | null;
            utensils?: components["schemas"]["Utensil"][];
            ingredients?: components["schemas"]["CocktailIngredient"][];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string | null;
            method?: components["schemas"]["CocktailMethod"] | null;
            /**
             * Format: float
             * @example 40
             */
            abv: number | null;
            /**
             * Format: float
             * @example 67.5
             */
            volume_ml?: number | null;
            /**
             * Format: float
             * @example 25.5
             */
            alcohol_units?: number | null;
            /** @example 350 */
            calories?: number | null;
            created_user?: components["schemas"]["UserBasic"];
            updated_user?: components["schemas"]["UserBasic"] | null;
            in_shelf?: boolean;
            in_bar_shelf?: boolean;
            is_favorited?: boolean;
            access?: {
                /** @example true */
                can_edit: boolean;
                /** @example true */
                can_delete: boolean;
                /** @example true */
                can_rate: boolean;
                /** @example true */
                can_add_note: boolean;
            };
            navigation?: {
                /** @example old-fashioned-1 */
                prev: string | null;
                /** @example tom-collins-1 */
                next: string | null;
            };
        };
        /** @description Minimal cocktail information */
        CocktailBasic: {
            /** @example 1 */
            id: number;
            /** @example old-fashioned-1 */
            slug: string;
            /** @example Old fashioned */
            name: string;
            short_ingredients?: string[];
        };
        CocktailExplore: {
            bar?: components["schemas"]["BarBasic"];
            /** @example Cocktail name */
            name?: string;
            /** @example Step by step instructions */
            instructions?: string;
            /** @example Garnish */
            garnish?: string | null;
            /** @example Cocktail description */
            description?: string | null;
            /** @example Source of the recipe */
            source?: string | null;
            images?: {
                /** @example 1 */
                sort?: number;
                /** @example a1b2c3d4e5f6g7h8i9j0 */
                placeholder_hash?: string;
                /** @example https://example.com/image.jpg */
                url?: string;
                /** @example Image copyright */
                copyright?: string;
            }[];
            tags?: string[];
            glass?: string | null;
            utensils?: string[];
            ingredients?: {
                /** @example Ingredient name */
                name?: string;
                /** @example 30 */
                amount?: number;
                /** @example 45 */
                amount_max?: number | null;
                /** @example ml */
                units?: string;
                /** @example true */
                optional?: boolean;
                /** @example Ingredient note */
                note?: string | null;
                substitutes?: {
                    /** @example Ingredient name */
                    name?: string;
                    /** @example 30 */
                    amount?: number | null;
                    /** @example 45 */
                    amount_max?: number | null;
                    /** @example ml */
                    units?: string | null;
                }[];
            }[];
            method?: string | null;
            /**
             * Format: float
             * @example 40
             */
            abv?: number | null;
        };
        CocktailIngredient: {
            ingredient: components["schemas"]["IngredientBasic"];
            /** @example 0 */
            sort: number;
            /**
             * Format: float
             * @example 30
             */
            amount: number;
            /**
             * Format: float
             * @example 60
             */
            amount_max?: number | null;
            /** @example ml */
            units: string;
            /** @example false */
            optional?: boolean;
            substitutes?: components["schemas"]["CocktailIngredientSubstitute"][];
            /** @example Additional notes */
            note?: string | null;
            /** @description Amounts in different units, converted if possible */
            formatted: {
                ml: {
                    /**
                     * Format: float
                     * @example 30
                     */
                    amount: number;
                    /**
                     * Format: float
                     * @example 60
                     */
                    amount_max: number;
                    /** @example ml */
                    units: string;
                    /** @example 30-60 ml */
                    full_text: string;
                };
                oz: {
                    /**
                     * Format: float
                     * @example 1
                     */
                    amount: number;
                    /**
                     * Format: float
                     * @example 2
                     */
                    amount_max: number;
                    /** @example oz */
                    units: string;
                    /** @example 1-2 oz */
                    full_text: string;
                };
                cl: {
                    /**
                     * Format: float
                     * @example 3
                     */
                    amount: number;
                    /**
                     * Format: float
                     * @example 6
                     */
                    amount_max: number;
                    /** @example cl */
                    units: string;
                    /** @example 3-6 cl */
                    full_text: string;
                };
            } & {
                [key: string]: unknown;
            };
            /** @example true */
            in_shelf?: boolean;
            /** @example true */
            in_shelf_as_substitute?: boolean;
            /** @example true */
            in_shelf_as_complex_ingredient?: boolean;
            /** @example true */
            in_bar_shelf?: boolean;
            /** @example true */
            in_bar_shelf_as_substitute?: boolean;
            /** @example true */
            in_bar_shelf_as_complex_ingredient?: boolean;
        };
        CocktailIngredientRequest: {
            ingredient_id: number;
            name?: string | null;
            /**
             * Format: float
             * @example 30
             */
            amount: number;
            /** @example ml */
            units: string;
            sort?: number;
            optional?: boolean;
            substitutes?: components["schemas"]["CocktailIngredientSubstituteRequest"][];
            /**
             * Format: float
             * @example 60
             */
            amount_max?: number | null;
            note?: string | null;
        };
        CocktailIngredientSubstitute: {
            ingredient: components["schemas"]["IngredientBasic"];
            /**
             * Format: float
             * @example 30
             */
            amount: number | null;
            /**
             * Format: float
             * @example 60
             */
            amount_max: number | null;
            /** @example ml */
            units: string | null;
            /** @example true */
            in_shelf: boolean;
            /** @example true */
            in_bar_shelf: boolean;
        };
        CocktailIngredientSubstituteRequest: {
            ingredient_id: number;
            /**
             * Format: float
             * @example 30
             */
            amount?: number | null;
            /**
             * Format: float
             * @example 60
             */
            amount_max?: number | null;
            /** @example ml */
            units?: string | null;
        };
        CocktailMethod: {
            /** @example 1 */
            id: number;
            /** @example Shake */
            name: string;
            /** @example 20 */
            dilution_percentage: number;
            /** @example 32 */
            cocktails_count: number;
        };
        CocktailMethodRequest: {
            /** @example Shake */
            name: string;
            /** @example 20 */
            dilution_percentage: number;
        };
        CocktailPrice: {
            /**
             * @description Number of ingredients that are missing defined prices in this category
             * @example 1
             */
            missing_prices_count: number;
            price_category: components["schemas"]["PriceCategory"];
            /** @description Total cocktail price, sum of `price_per_pour` amounts */
            total_price: components["schemas"]["Price"];
            prices_per_ingredient: {
                ingredient: components["schemas"]["IngredientBasic"];
                /** @description Units used for price calculation */
                units: string;
                /** @description Price per 1 unit of ingredient amount */
                price_per_unit: components["schemas"]["Price"];
                /** @description Price per cocktail ingredient part */
                price_per_use: components["schemas"]["Price"];
            }[];
        };
        CocktailRequest: {
            /** @example Cocktail name */
            name: string;
            /** @example Step by step instructions */
            instructions: string;
            /** @example Cocktail description */
            description?: string | null;
            /** @example Source of the recipe */
            source?: string | null;
            /** @example Garnish */
            garnish?: string | null;
            /** @example 1 */
            glass_id?: number | null;
            /** @example 1 */
            method_id?: number | null;
            tags?: string[];
            ingredients?: components["schemas"]["CocktailIngredientRequest"][];
            /** @description List of existing image ids */
            images?: number[];
            /** @description List of existing utensil ids */
            utensils?: number[];
        };
        Collection: {
            /** @example 1 */
            id: number;
            /** @example Collection name */
            name: string;
            /** @example Collection description */
            description: string | null;
            is_bar_shared: boolean;
            /**
             * Format: date-time
             * @example 2023-05-14T21:23:40.000000Z
             */
            created_at: string;
            created_user?: components["schemas"]["UserBasic"];
            cocktails?: components["schemas"]["CocktailBasic"][];
        };
        CollectionRequest: {
            /** @example Collection name */
            name: string;
            /** @example Collection description */
            description?: string | null;
            is_bar_shared?: boolean;
            cocktails?: number[];
        };
        Export: {
            /** @example 1 */
            id?: number;
            /** @example cocktails.csv */
            filename?: string;
            /**
             * Format: date-time
             * @example 2023-05-14T21:23:40.000000Z
             */
            created_at?: string;
            /** @example Bar name */
            bar_name?: string;
            /** @example true */
            is_done?: boolean;
        };
        ExportRequest: {
            type?: components["schemas"]["ExportTypeEnum"];
            units?: components["schemas"]["ForceUnitConvertEnum"];
            bar_id?: number;
        };
        FileDownloadLink: {
            /**
             * @description Absolute URL to download the export
             * @example http://example.com/api/exports/29/download?t=2053f2e716f2dcddc0a2b767249235750e549af6d459cb1c65d4720e72404d88&e=1723480826
             */
            url?: string;
            /** @example 2053f2e716f2dcddc0a2b767249235750e549af6d459cb1c65d4720e72404d88 */
            token?: string;
            /** @example 2024-08-12T16:40:26+00:00 */
            expires?: string;
        };
        Glass: {
            /** @example 1 */
            id: number;
            /** @example Lowball */
            name: string;
            /** @example Glass for smaller cocktails */
            description: string | null;
            /** @example 32 */
            cocktails_count: number;
            /**
             * Format: float
             * @example 120
             */
            volume: number | null;
            /** @example ml */
            volume_units: string | null;
        };
        GlassRequest: {
            /** @example Lowball */
            name: string;
            /** @example Glass for smaller cocktails */
            description?: string | null;
            /**
             * Format: float
             * @example 120
             */
            volume?: number | null;
            /** @example ml */
            volume_units?: string | null;
        };
        /** @description Image attached to a specific resource */
        Image: {
            /** @example 1 */
            id: number;
            /** @example cocktails/1/image.jpg */
            file_path: string;
            /** @example http://example.com/uploads/cocktails/1/image.jpg */
            url: string;
            /** @example Image copyright */
            copyright: string | null;
            /** @example 1 */
            sort: number;
            /** @example 1QcSHQRnh493V4dIh4eXh1h4kJUI */
            placeholder_hash: string | null;
        };
        ImageRequest: {
            /**
             * Format: binary
             * @description Image file. Base64 encoded images also supported. Max 50MB
             */
            image: string | null;
            /** @description Existing image id, used to update an existing image */
            id?: number | null;
            /** @example 1 */
            sort: number;
            /** @example Image copyright */
            copyright?: string | null;
        };
        Ingredient: {
            /** @example 1 */
            id: number;
            /** @example gin-1 */
            slug: string;
            /** @example Gin */
            name: string;
            /**
             * Format: float
             * @example 40
             */
            strength: number;
            /** @example Gin is a type of alcoholic spirit */
            description: string | null;
            /** @example Worldwide */
            origin: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string | null;
            images?: components["schemas"]["Image"][];
            parent_ingredient?: components["schemas"]["IngredientBasic"] | null;
            /** @example #ffffff */
            color: string;
            category?: components["schemas"]["IngredientCategory"] | null;
            /** @example 12 */
            cocktails_count?: number;
            varieties?: components["schemas"]["IngredientBasic"][];
            cocktails?: {
                /** @example 1 */
                id?: number;
                /** @example old-fashioned-1 */
                slug?: string;
                /** @example Old fashioned */
                name?: string;
            }[];
            created_user?: components["schemas"]["UserBasic"];
            updated_user?: components["schemas"]["UserBasic"] | null;
            access?: {
                /** @example true */
                can_edit?: boolean;
                /** @example true */
                can_delete?: boolean;
            }[];
            ingredient_parts?: components["schemas"]["IngredientBasic"][];
            prices?: components["schemas"]["IngredientPrice"][];
            in_shelf?: boolean;
            in_bar_shelf?: boolean;
            in_shopping_list?: boolean;
            used_as_substitute_for?: components["schemas"]["IngredientBasic"][];
            can_be_substituted_with?: components["schemas"]["IngredientBasic"][];
        };
        /** @description Minimal ingredient information */
        IngredientBasic: {
            /** @example 1 */
            id: number;
            /** @example gin-1 */
            slug: string;
            /** @example Gin */
            name: string;
        };
        IngredientCategory: {
            /** @example 1 */
            id: number;
            /** @example Spirits */
            name: string;
            /** @example Category of base spirits */
            description: string | null;
            /** @example 32 */
            ingredients_count: number;
        };
        IngredientCategoryRequest: {
            /** @example Spirits */
            name: string;
            /** @example Category of base spirits */
            description?: string | null;
        };
        IngredientPrice: {
            price_category: components["schemas"]["PriceCategory"];
            price: components["schemas"]["Price"];
            /**
             * Format: float
             * @example 30
             */
            amount: number;
            /** @example ml */
            units: string;
            /** @example Updated price */
            description: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string | null;
        };
        IngredientPriceRequest: {
            price_category_id: number;
            price: number;
            /** Format: float */
            amount: number;
            units: string;
            description?: string | null;
        };
        /** @description Ingredient recommendation with number of potential cocktails */
        IngredientRecommend: components["schemas"]["IngredientBasic"] & {
            /** @example 10 */
            potential_cocktails?: number;
        };
        IngredientRequest: {
            /** @example Gin */
            name: string;
            /** @example 1 */
            ingredient_category_id?: number | null;
            /**
             * Format: float
             * @example 40
             */
            strength?: number;
            /** @example Gin is a type of alcoholic spirit */
            description?: string | null;
            /** @example Worldwide */
            origin?: string | null;
            /** @example #ffffff */
            color?: string | null;
            /** @example 1 */
            parent_ingredient_id?: number | null;
            /** @description Existing image ids */
            images?: number[];
            /** @description Existing ingredient ids */
            complex_ingredient_part_ids?: number[];
            prices?: components["schemas"]["IngredientPriceRequest"][];
        };
        LoginRequest: {
            /** @example admin@example.com */
            email: string;
            /**
             * Format: password
             * @example password
             */
            password: string;
            /** @example My device */
            token_name?: string | null;
        };
        Menu: {
            /** @example 1 */
            id?: number;
            is_enabled?: boolean;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string | null;
            categories?: {
                /** @example Category name */
                name?: string;
                cocktails?: {
                    /** @example 1 */
                    id?: number;
                    /** @example cocktail-name-1 */
                    slug?: string;
                    /** @example 1 */
                    sort?: number;
                    price?: components["schemas"]["Price"];
                    /** @example EUR */
                    currency?: string;
                    /** @example Cocktail name */
                    name?: string;
                    short_ingredients?: string[];
                }[];
            }[];
        };
        MenuExplore: {
            bar?: {
                /** @example Bar name */
                name?: string;
                /** @example Bar subtitle */
                subtitle?: string;
                /** @example Bar description */
                description?: string;
            };
            categories?: {
                /** @example Category name */
                name?: string;
                cocktails?: {
                    /** @example 1 */
                    sort?: number;
                    price?: components["schemas"]["Price"];
                    /** @example 01ARZ3NDEKTSV4RRFFQ69G5FAV */
                    public_id?: string;
                    /** @example cocktail-name-1 */
                    slug?: string;
                    /** @example EUR */
                    currency?: string;
                    /** @example Cocktail name */
                    name?: string;
                    short_ingredients?: string[];
                    /** @example https://example.com/image.jpg */
                    image?: string;
                }[];
            }[];
        };
        MenuRequest: {
            is_enabled: boolean;
            cocktails: {
                /** @example 1 */
                cocktail_id?: number;
                /**
                 * Format: minor
                 * @example 2252
                 */
                price?: number;
                /** @example Category name */
                category_name?: string;
                /** @example 1 */
                sort?: number;
                /**
                 * Format: ISO 4217
                 * @example EUR
                 */
                currency?: string;
            }[];
        };
        Note: {
            /** @example 1 */
            id?: number;
            /** @example Note text */
            note?: string;
            /** @example 1 */
            user_id?: number;
            /**
             * Format: date-time
             * @example 2022-01-01T00:00:00+00:00
             */
            created_at?: string;
        };
        NoteRequest: {
            /** @example Note text */
            note: string;
            /** @example 1 */
            resource_id: number;
            /** @example cocktail */
            resource: string;
        };
        OAuthLoginRequest: {
            /** @example google|facebook|keycloak */
            providerId: string;
            /** @example 52f8b40c-7a71-4041-95fb-d115a82530cf.4206bcef-ca2a-4228-a5ca-aae12d5aac7b.d3edfb2b-5046-472f-aa12-857b78e6011d */
            code: string;
            /** @example 479107e2ddb341a4a177bda6194ab6c9bea4a6e6be3440cbb930af9d66aec5bb14eff15738c7467c92324e2eab4278b0 */
            codeVerifier?: string;
        };
        OAuthProvider: {
            /** @example google|facebook|keycloak */
            id: string;
            /** @example bar-assistant */
            clientId: string;
            /** @example google|facebook|keycloak|oidc */
            type: string;
            /** @example google.svg|facebook.svg|oidc.png */
            icon: string;
            /** @example Google|Facebook|Keycloak */
            name?: string;
            /** @example https://example.com/auth */
            authority: string;
            /** @example https://example.com/login/callback */
            redirectUri: string;
            /** @example openid profile email */
            scope: string;
        };
        PersonalAccessToken: {
            /** @example 1 */
            id?: number;
            /** @example user_generated */
            name?: string;
            /** @example [
             *       "cocktails.read",
             *       "cocktails.write",
             *       "ingredients.read",
             *       "ingredients.write"
             *     ] */
            abilities?: string[];
            /** @example 2023-05-14T21:23:40.000000Z */
            last_used_at?: string;
            /** @example 2023-05-14T21:23:40.000000Z */
            created_at?: string;
            /** @example 2023-05-14T21:23:40.000000Z */
            expires_at?: string;
        };
        PersonalAccessTokenRequest: {
            /** @example user_generated */
            name?: string | null;
            abilities: components["schemas"]["AbilityEnum"][];
            /** @example 2023-05-14T21:23:40.000000Z */
            expires_at?: string | null;
        };
        Price: {
            /**
             * Format: float
             * @example 13.39
             */
            price: number;
            /** @example 1339 */
            price_minor: number;
            /** @example EUR 13.39 */
            formatted_price: string;
            /** @example EUR */
            currency: string;
        };
        PriceCategory: {
            /** @example 1 */
            id: number;
            /** @example Amazon (DE) */
            name: string;
            /** @example Current price on amazon.de */
            description: string | null;
            /**
             * Format: ISO 4217
             * @example EUR
             */
            currency: string;
            /** @example € */
            currency_symbol?: string;
        };
        PriceCategoryRequest: {
            /** @example Amazon (DE) */
            name: string;
            /** @example Current price on amazon.de */
            description?: string | null;
            /**
             * Format: ISO 4217
             * @example EUR
             */
            currency: string;
        };
        Profile: {
            /** @example 1 */
            id: number;
            /** @example Floral */
            name: string;
            /** @example example@example.com */
            email: string;
            is_subscribed: boolean;
            memberships: components["schemas"]["BarMembership"][];
        };
        ProfileRequest: {
            bar_id?: number | null;
            /** @example Bar Tender */
            name: string;
            /** @example new@email.com */
            email: string;
            /**
             * Format: password
             * @example newpassword
             */
            password?: string | null;
            is_shelf_public?: boolean;
            use_parent_as_substitute?: boolean;
        };
        RegisterRequest: {
            /** @example admin@example.com */
            email: string;
            /** @example Bar Tender */
            name: string;
            /**
             * Format: password
             * @example password
             */
            password: string;
        };
        ServerVersion: {
            /** @example 1.0.0 */
            version: string;
            /**
             * @description Latest version available on GitHub
             * @example 3.1.0
             */
            latest_version?: string;
            /** @example true */
            is_latest?: boolean;
            /** @example production */
            type: string;
            /** @example https://search.example.com */
            search_host: string;
            /** @example 1.2.0 */
            search_version: string;
        };
        ShoppingList: {
            ingredient: components["schemas"]["IngredientBasic"];
            /** @example 3 */
            quantity: number;
        };
        ShoppingListRequest: {
            ingredients: {
                id?: number;
                quantity?: number;
            }[];
        };
        Subscription: {
            type?: string;
            paddle_id?: string;
            status?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string | null;
            /** Format: date-time */
            paused_at?: string | null;
            /** Format: date-time */
            ends_at?: string | null;
            past_due?: boolean;
            is_recurring?: boolean;
            next_billed_at?: {
                currency?: string;
                amount?: string;
                /** Format: date-time */
                date?: string;
            }[];
            /** Format: uri */
            update_payment_url?: string;
            /** Format: uri */
            cancel_url?: string;
            transactions?: components["schemas"]["Transaction"][];
        };
        Tag: {
            /** @example 1 */
            id: number;
            /** @example Floral */
            name: string;
            /** @example 12 */
            cocktails_count: number;
        };
        TagRequest: {
            /** @example Floral */
            name: string;
        };
        Token: {
            /** @example 1|dvWHLWuZbmWWFbjaUDla393Q9jK5Ou9ujWYPcvII */
            token?: string;
        };
        Transaction: {
            total?: string;
            tax?: string;
            currency?: string;
            status?: string;
            invoice_number?: string;
            /** Format: uri */
            url?: string;
            /** Format: date-time */
            billed_at?: string;
            /** Format: date-time */
            created_at?: string;
            /** Format: date-time */
            updated_at?: string | null;
        };
        User: {
            /** @example 1 */
            id?: number;
            /** @example Bartender */
            name?: string;
            /** @example admin@example.com */
            email?: string;
            is_subscribed?: boolean;
            role?: {
                /** @example 1 */
                bar_id?: number;
                /** @example 1 */
                role_id?: number;
                /** @example Admin */
                role_name?: string;
            };
        };
        UserBasic: {
            /** @example 1 */
            id: number;
            /** @example Bartender */
            name: string;
        };
        UserOAuthAccount: {
            /** @example 1 */
            id?: number;
            /** @example oidc.svg */
            icon?: string;
            /** @example Google|Facebook|Keycloak */
            name?: number;
            /** @example 1|faaf-fawefa-ffawef-awef */
            userId?: number;
            /**
             * Format: date-time
             * @example 2022-01-01T00:00:00+00:00
             */
            createdAt?: string;
        };
        UserRequest: {
            /** @example 1 */
            role_id: number;
            /** @example admin@example.com */
            email: string;
            /** @example Bar Tender */
            name: string;
            /**
             * Format: password
             * @example password
             */
            password: string;
        };
        UserSubscription: {
            prices: string;
            customer: {
                paddle_id: string;
                paddle_email: string;
                paddle_name: string;
            }[];
            subscription: components["schemas"]["Subscription"] | null;
        };
        Utensil: {
            /** @example 1 */
            id: number;
            /** @example Shaker */
            name: string;
            /** @example Used to shake ingredients */
            description: string | null;
        };
        UtensilRequest: {
            /** @example Shaker */
            name: string;
            /** @example Used to shake ingredients */
            description?: string | null;
        };
        ValidationError: {
            /** @example The cocktail name must be a string. (and 2 more errors) */
            message: string;
            errors: {
                [key: string]: string[];
            };
        };
        /**
         * Cocktail recipe - Draft 02
         * @description Schema for a cocktail recipe including detailed ingredient data. Draft 02 splits ingredients and recipe data.
         */
        "cocktail-02.schema": {
            recipe: {
                /**
                 * Format: slug
                 * @description The unique identifier for a cocktail
                 */
                _id: string;
                /** @description Name of the recipe */
                name: string;
                /** @description Recipe instructions */
                instructions: string;
                /**
                 * Format: date-time
                 * @description Date of recipe
                 */
                created_at?: string | null;
                /** @description Recipe description */
                description?: string | null;
                /** @description Source of the recipe, either URL or Book referece */
                source?: string | null;
                /** @description Cocktail garnish */
                garnish?: string | null;
                /** @description Total ABV of made cocktail */
                abv?: number | null;
                /** @description Short keywords to describe cocktail */
                tags?: string[];
                /** @description Glass type */
                glass?: string | null;
                /** @description Cocktail method */
                method?: string | null;
                /** @description Required utensils */
                utensils?: string[];
                /** @description List of cocktail images */
                images?: {
                    /** Format: uri */
                    uri: string;
                    /** @description Control the representation of the image */
                    sort?: number;
                    /** @description Computed placeholder hash, like thumbhash, blurhash and similar */
                    placeholder_hash?: string | null;
                    /** @description Image copyright information */
                    copyright: string;
                }[];
                /** @description List of cocktail ingredients and substitutes */
                ingredients?: {
                    /** @description The unique reference for an ingredient from `ingredients` property */
                    _id: string;
                    /** @description Amount of the ingredient */
                    amount: number;
                    /** @description Units for the amount */
                    units: string;
                    /** @description Indicates if the ingredient is optional */
                    optional?: boolean;
                    /** @description Maximum amount of the ingredient */
                    amount_max?: number | null;
                    /** @description Additional note related to the cocktail ingredient */
                    note?: string | null;
                    substitutes?: {
                        /** @description The unique reference for an ingredient from `ingredients` property */
                        _id: string;
                        /** @description Amount of the substitute ingredient */
                        amount?: number | null;
                        /** @description Units for the amount */
                        units?: string | null;
                        /** @description Maximum amount of the substitute ingredient */
                        amount_max?: number | null;
                    }[];
                    /** @description Sort order for the ingredient */
                    sort?: number;
                }[];
            };
            /** @description List of ingredients */
            ingredients: {
                /** @description The unique identifier for an ingredient, used as a refrence in cocktail ingredient list */
                _id: string;
                name: string;
                /** @description Ingredient ABV */
                strength?: number | null;
                /** @description Additional ingredient information */
                description?: string | null;
                /** @description Ingredient origin */
                origin?: string | null;
                /** @description Category ingredient belongs to */
                category?: string | null;
            }[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "auth-config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["AuthConfig"];
                    };
                };
            };
        };
    };
    authenticate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Token"];
                    };
                };
            };
            /** @description Unable to authenticate */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Profile"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    passwordForgot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example admin@example.com */
                    email?: string;
                };
            };
        };
        responses: {
            /** @description Password reset link sent */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unable to send password reset link */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    passwordReset: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example token-from-email */
                    token?: string;
                    /** @example admin@example.com */
                    email?: string;
                    /** @example password */
                    password?: string;
                    /** @example password */
                    password_confirmation?: string;
                };
            };
        };
        responses: {
            /** @description Password succssfully reset */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unable to reset password */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    confirmAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a user */
                id: number;
                /** @description Hash string sent to user email */
                hash: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account confirmed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listBars: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"][];
                    };
                };
            };
        };
    };
    saveBar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BarRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    showBar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateBar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BarRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    deleteBar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    joinBar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example 01H8S3VH2HTEB3D893AW8NTBBC */
                    invite_code?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Bar"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listBarMembership: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["BarMembership"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    leaveBar: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    removeBarMembership: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
                /** @description Database id of a user */
                userId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    transferBarOwnership: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /**
                     * @description Database id of a user you want to transfer ownership to
                     * @example 1
                     */
                    user_id?: number;
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    toggleBarStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    status?: components["schemas"]["BarStatusEnum"];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listCocktails: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
                /** @description Filter by attributes */
                filter?: {
                    id?: string;
                    name?: string;
                    ingredient_name?: string;
                    tag_id?: string;
                    created_user_id?: string;
                    glass_id?: string;
                    cocktail_method_id?: string;
                    collection_id?: string;
                    favorites?: boolean;
                    on_shelf?: boolean;
                    bar_shelf?: boolean;
                    user_shelves?: string;
                    shelf_ingredients?: string;
                    is_public?: boolean;
                    user_rating_min?: string;
                    user_rating_max?: string;
                    average_rating_min?: string;
                    average_rating_max?: string;
                    abv_min?: string;
                    abv_max?: string;
                    main_ingredient_id?: string;
                    total_ingredients?: string;
                    missing_ingredients?: string;
                    missing_bar_ingredients?: string;
                    specific_ingredients?: string;
                    ignore_ingredients?: string;
                };
                /** @description Sort by attributes. Available attributes: `name`, `created_at`, `average_rating`, `user_rating`, `abv`, `total_ingredients`, `missing_ingredients`, `missing_bar_ingredients`, `favorited_at`. */
                sort?: string;
                /** @description Include additional relationships. Available relations: `glass`, `method`, `user`, `navigation`, `utensils`, `createdUser`, `updatedUser`, `images`, `tags`, `ingredients.ingredient`, `ratings`. */
                include?: string;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Cocktail"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    saveCocktail: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    showCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Request validation failed. */
            422: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationError"];
                };
            };
        };
    };
    deleteCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    toggleCocktailFavorite: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            /** @example 1 */
                            id?: number;
                            /** @example true */
                            is_favorited?: boolean;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    createCocktailPublicLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteCocktailPublicLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    shareCocktail: {
        parameters: {
            query?: {
                /** @description Share format */
                type?: "json" | "json-ld" | "yaml" | "yml" | "xml" | "text" | "markdown" | "md";
                /** @description Units of measurement */
                units?: string;
            };
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /** @example json */
                            type: string;
                            /** @example <content in requested format> */
                            content: string;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showSimilarCocktails: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    copyCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    getCocktailPrices: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailPrice"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listCocktailMethods: {
        parameters: {
            query?: {
                /** @description Filter by attributes */
                filter?: {
                    name?: string;
                };
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"][];
                    };
                };
            };
        };
    };
    saveCocktailMethod: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailMethodRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showCocktailMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateCocktailMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CocktailMethodRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailMethod"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteCocktailMethod: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listCollections: {
        parameters: {
            query?: {
                /** @description Filter by attributes */
                filter?: {
                    id?: number;
                    name?: string;
                    cocktail_id?: string;
                };
                /** @description Include additional relationships. Available relations: `cocktails`. */
                include?: string;
                /** @description Sort by attributes. Available attributes: `name`, `created_at`. */
                sort?: string;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"][];
                    };
                };
            };
        };
    };
    saveCollection: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CollectionRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listSharedCollections: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CollectionRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    syncCocktailsInCollection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    cocktails?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Collection"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showPublicCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Public cocktail id */
                public_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailExplore"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listExports: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Export"][];
                    };
                };
            };
        };
    };
    saveExport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExportRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Export"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Reached rate limit. */
            429: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteExport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    downloadExport: {
        parameters: {
            query: {
                /** @description Token */
                t: string;
                /** @description Timestamp */
                e: string;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/octet-stream": unknown;
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    generateExportDownloadLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["FileDownloadLink"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listGlassware: {
        parameters: {
            query?: {
                /** @description Filter by attributes */
                filter?: {
                    name?: string;
                };
                /** @description Sort by attributes. Available attributes: `name`, `created_at`. */
                sort?: string;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"][];
                    };
                };
            };
        };
    };
    saveGlassware: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GlassRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showGlassware: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateGlassware: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GlassRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Glass"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteGlassware: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listImages: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Image"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    uploadImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    images: components["schemas"]["ImageRequest"][];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"][];
                    };
                };
            };
        };
    };
    showImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["ImageRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Image"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    getImageThumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "image/jpg": string;
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    importCocktail: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Valid JSON structure to import. */
                    source?: string;
                    /** @description How to handle duplicates. Cocktails are matched by lowercase name. */
                    duplicate_actions?: components["schemas"]["DuplicateActionsEnum"];
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Cocktail"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Reached rate limit. */
            429: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    scrapeRecipe: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @example https://www.example.com/recipe-url */
                    source?: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /** @example draft2 */
                            schema_version: string;
                            schema: components["schemas"]["cocktail-02.schema"];
                            scraper_meta: {
                                _id: string;
                                source: string;
                            }[];
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    importIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "text/csv": unknown;
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description CSV file
                     */
                    source: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listIngredientCategories: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientCategory"][];
                    };
                };
            };
        };
    };
    saveIngredientCategory: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showIngredientCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateIngredientCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteIngredientCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listIngredients: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
                /** @description Filter by attributes */
                filter?: {
                    id?: number;
                    name?: string;
                    name_exact?: string;
                    category_id?: number;
                    origin?: string;
                    created_user_id?: number;
                    on_shopping_list?: boolean;
                    on_shelf?: boolean;
                    bar_shelf?: boolean;
                    /** Format: float */
                    strength_min?: number;
                    /** Format: float */
                    strength_max?: number;
                    main_ingredients?: string;
                    complex?: boolean;
                };
                /** @description Sort by attributes. Available attributes: `name`, `created_at`, `strength`, `total_cocktails`. */
                sort?: string;
                /** @description Include additional relationships. Available relations: `parentIngredient`, `varieties`, `prices`, `ingredientParts`, `category`, `images`. */
                include?: string;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Ingredient"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    saveIngredient: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Ingredient"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showIngredient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id or slug of a resource */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Ingredient"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateIngredient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["IngredientRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Ingredient"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteIngredient: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    extraIngredients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["CocktailBasic"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    ingredientCocktails: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CocktailBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    ingredientSubstitutes: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["IngredientBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showMenu: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Menu"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateMenu: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MenuRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Menu"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    publicMenu: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Bar database slug */
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["MenuExplore"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    exportMenu: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "text/csv": string;
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listNotes: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["Note"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    saveNote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NoteRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Note"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Note"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "oauth-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OAuthLoginRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unable to authenticate */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listOAuthAccounts: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["UserOAuthAccount"][];
                    };
                };
            };
        };
    };
    unlinkOAuthAccount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PersonalAccessToken"][];
                    };
                };
            };
        };
    };
    saveToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PersonalAccessTokenRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Token"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listPriceCategories: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"][];
                    };
                };
            };
        };
    };
    savePriceCategory: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PriceCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    "10017aa4f043f641c210bafc56092997": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updatePriceCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PriceCategoryRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["PriceCategory"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deletePriceCategory: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Profile"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProfileRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Profile"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    rateCocktail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    rating?: number;
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteRating: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showServerVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ServerVersion"];
                    };
                };
            };
        };
    };
    listUserIngredients: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["IngredientBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    listUserShelfCocktails: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CocktailBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    listUserFavoriteCocktails: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CocktailBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    batchStoreUserIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    batchDeleteUserIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    recommendIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientRecommend"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listBarShelfIngredients: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["IngredientBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    batchStoreBarShelfIngredients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    batchDeleteBarShelfIngredients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: number[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listBarShelfCocktails: {
        parameters: {
            query?: {
                /** @description Set current page number */
                page?: number;
                /** @description Set number of results per page */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CocktailBasic"][];
                        links?: {
                            first?: string | null;
                            last?: string | null;
                            prev?: string | null;
                            next?: string | null;
                        };
                        meta?: {
                            current_page?: number;
                            from?: number;
                            last_page?: number;
                            links?: {
                                url?: string;
                                label?: string;
                                active?: boolean;
                            }[];
                            path?: string;
                            per_page?: number;
                            to?: number;
                            total?: number;
                        };
                    };
                };
            };
        };
    };
    recommendBarIngredients: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["IngredientRecommend"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listShoppingListIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["ShoppingList"][];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    batchStoreShoppingListIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShoppingListRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    batchDeleteShoppingListIngredients: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    ingredients?: {
                        id?: number;
                    }[];
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    shareShoppingList: {
        parameters: {
            query?: {
                /** @description Type of share. Available types: `markdown`. */
                type?: string;
            };
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: {
                            /** @example markdown */
                            type: string;
                            /** @example <content in requested format> */
                            content: string;
                        };
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showBarStats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["BarStats"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["UserSubscription"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    type: string;
                };
            };
        };
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listTags: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"][];
                    };
                };
            };
        };
    };
    saveTag: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Tag"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteTag: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listUsers: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"][];
                    };
                };
            };
        };
    };
    saveUser: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showUser: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["User"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    listUtensils: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"][];
                    };
                };
            };
        };
    };
    saveUtensil: {
        parameters: {
            query?: never;
            header?: {
                /** @description Database id of a bar. Required if you are not using `bar_id` query string. */
                "Bar-Assistant-Bar-Id"?: number;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UtensilRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            201: {
                headers: {
                    /** @description URL of the new resource */
                    Location?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    showUtensil: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    updateUtensil: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UtensilRequest"];
            };
        };
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data: components["schemas"]["Utensil"];
                    };
                };
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
    deleteUtensil: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Database id of a resource */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description You are not authorized for this action. */
            403: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
            /** @description Resource record not found. */
            404: {
                headers: {
                    /** @description Max number of attempts. */
                    "x-ratelimit-limit"?: number;
                    /** @description Remaining number of attempts. */
                    "x-ratelimit-remaining"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["APIError"];
                    };
                };
            };
        };
    };
}
